<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WindwardInterfaces3.5</name>
    </assembly>
    <members>
        <member name="T:net.windward.VersionNumbers">
            <summary>Version numbers for Windward Reports and AutoTag</summary>
        </member>
        <member name="F:net.windward.VersionNumbers.VERSION_STR">
            <summary>Version as a full string</summary>
        </member>
        <member name="F:net.windward.VersionNumbers.ARROW_VERSION_STR">
            <summary>Arrow version as a full string</summary>
        </member>
        <member name="F:net.windward.VersionNumbers.ARROW_MAJOR_VERSION_STR">
            <summary>Arrow resource version. DO NOT CHANGE; changing this will require an updating user to re-add all web parts</summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl">
            <summary>
            When providing a connection url, returns this object.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.MODE">
            <summary>
            The mode of the returned connection info.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.MODE.URL" -->
        <member name="F:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.MODE.STREAM">
            <summary>
            Use the stream.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.Mode">
            <summary>
            The mode of the returned connection info.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.Url">
            <summary>
            The url to use.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.HeaderProperties">
            <summary>
            Properties to put in the request header. If a property is set to null, it will not be put in. And if that is a 
            property we put in the request header ourselves, it will not be put in.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.DataStream">
            <summary>
            If this is returning a stream, this is the stream.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            Create the object.
            </summary>
            <param name="url">The url to use.</param>
            <param name="headerProperties">Properties to put in the request header. </param>
            <param name="stream">If this is returning a stream, this is the stream.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUrl.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create the object.
            </summary>
            <param name="url">The url to use.</param>
            <param name="headerProperties">Properties to put in the request header. </param>
        </member>
        <member name="T:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils">
            <summary>
            Utilities for the IAdvancedConnection implementors.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE">
            <summary>
            The type(s) of datasources supported.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE.JSON">
            <summary>
            JSON datasource.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE.ODATA">
            <summary>
            OData datasource.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE.SALESFORCE">
            <summary>
            SFDC datasource.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE.XML">
            <summary>
            XML datasource.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE.NONE">
            <summary>
            Used to specify that no type is supported.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.AdvancedConnection.IAdvancedConnection">
            <summary>
            Classes that implement this interface provide advanced functionality to a connection that connects via a url.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.AdvancedConnection.IAdvancedConnection.TypesSupported">
            <summary>
            When the AutoTag datasource connection window is open, it will query this to see if the datasource type is
            supported. If it is, then it will add the advanced button.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.AdvancedConnection.IAdvancedConnection.Title">
            <summary>
            The title for the advanced properties window.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.AdvancedConnection.IAdvancedConnection.GetProperties(WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE)">
            <summary>
            When a datasource connection is being created, it will read this to create the advanced window.
            </summary>
            <param name="type">Which data type we need the params for (will be different for different types).</param>
            <returns>The parameters that need to be set.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WindwardInterfaces.net.windward.AdvancedConnection.IAdvancedConnection.GetUrl(WindwardInterfaces.net.windward.AdvancedConnection.AdvancedConnectionUtils.DATASOURCE_TYPE,System.String,System.Collections.Generic.IDictionary{System.String,System.String})" -->
        <member name="T:WindwardInterfaces.net.windward.api.csharp.IReportDataSource">
            <summary>
            This supplies a data source to Windward Reports. Implementation of this interface is necessary and sufficient to
            provide a data source to Windward Reports. This object lives for the lifetime of substituting data into a report.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.api.csharp.IReportDataSource.ParamMode">
            <summary>
            The parameter substitution mode.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.api.csharp.IReportDataSource.Map">
            <summary>
            Adds a map that is used for ${variable} substitution. The map should be string pairs and the key values cannot
            have any of the characters ${} in them. When ${key} is found in any tag, it is replaced with the matching value.
            The key and value strings are not evaluated in any way, it is just a text substitution. This replace occurs before
            any other evaluation of a tag so the value string can have ${variable} values that will then be evaluated.
            This call sets the map so calling it a second time replaces the map passed in the first time. The map is copied
            so on return changes to the passed in map will not affect the data source.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.api.csharp.IReportDataSource.Close">
            <summary>
            Called when processing is complete. Used to close any resources opened by this object.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.api.csharp.IReportDataSource.Datasource">
            <summary>
            Return the underlying datasource provider.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DatasetBase">
            <summary>
            Base class for a dataset.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DatasetBase.DB_TYPE">
            <summary>
            What specific type of dataset.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.DB_TYPE.ADO">
            <summary>
            AdoDataset
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.DB_TYPE.ODATA">
            <summary>
            ODataDataset
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.DB_TYPE.XPATH">
            <summary>
            XPathDataset
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.dsName">
            <summary>
            The name of the dataset.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.selectAll">
            <summary>
            The select that builds the dataset.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase._selectAllFormat">
            <summary>
            The format for displaying the returned vars.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase._selectCount">
            <summary>
            A select that will return a count of the number of possible values.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase._selectCheck">
            <summary>
            A select that will return if a given value is one of the list of possibles.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.desc">
            <summary>
            The description for this dataset.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.dsFields">
            <summary>
            The fields this dataset defines.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.dsParameters">
            <summary>
            The parameters for the dataset's select.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetBase.userDefined">
            <summary>
            true if the user defined this dataset. false if defined in the datasource (POD or RDL file).
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{WindwardInterfaces.net.windward.datasource.DatasetField},System.Collections.Generic.List{WindwardInterfaces.net.windward.datasource.DatasetParameter})">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="selectAll">The select to get this dataset.</param>
            <param name="selectAllFormat">The format for displaying the returned vars.</param>
            <param name="selectCount">A select that will return a count of the number of possible values.</param>
            <param name="selectCheck">A select that will return if a given value is one of the list of possibles.</param>
            <param name="fields">The field mapping for this dataset.</param>
            <param name="parameters">The parameters for this dataset.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="selectAll">The select to get this dataset.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.#ctor(WindwardInterfaces.net.windward.datasource.DatasetBase)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">The object to copy.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.Name">
            <summary>
            The name of this dataset.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.Select">
            <summary>
            The select to get this dataset.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.SelectAllFormat">
            <summary>
            The format for displaying the returned vars.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.SelectCount">
            <summary>
            A select that will return a count of the number of possible values.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.SelectCheck">
            <summary>
            A select that will return if a given value is one of the list of possibles.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.Description">
            <summary>
            The description for this dataset.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.Fields">
            <summary>
            The field mapping for this dataset. The key of this table is DatasetField.FieldName which is the name used to access this field.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.GetField(System.String)">
            <summary>
            Get the field with the passed in name.
            </summary>
            <param name="name">field name.</param>
            <returns>The field with this name.</returns>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.Parameters">
            <summary>
            The parameter mapping for this dataset.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetBase.UserDefined">
            <summary>
            true if the user defined this dataset. false if defined in the datasource (POD or RDL file).
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DatasetBase.CtorField">
            <summary>
            Create a DatasetField. Used to call the correct field constructor in derived dataset classes.
            </summary>
            <param name="element">The XML to build the object from.</param>
            <returns>The created field.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.#ctor(System.Xml.XmlElement,WindwardInterfaces.net.windward.datasource.DatasetBase.CtorField)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
            <param name="ctorField">DatasetField ctor.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.ToXml(System.Xml.XmlWriter)">
            <summary>
            Serialize this object.
            </summary>
            <param name="xmlWriter">The xml document serializing to.</param>
            <returns>The set of elements representing this object.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.ToXmlProps(System.Xml.XmlWriter)">
            <summary>
            Write the object to an XML file.
            </summary>
            <param name="xmlWriter">The file to write to.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetBase.ToXmlChildren(System.Xml.XmlWriter)">
            <summary>
            Write the children of this object to an XML file
            </summary>
            <param name="xmlWriter">The file to write to.</param>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DatasetField">
            <summary>
            A field in a dataset.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE">
            <summary>
            What the value is referencing.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE.COLUMN">
            <summary>
            Is a column in the returned dataset.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE.VALUE">
            <summary>
            Is a value
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetField.#ctor(System.String,WindwardInterfaces.net.windward.datasource.MetaDataElement,System.String,WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE,System.Boolean)">
            <summary>
            Create a field object for a column in the containing dataset.
            </summary>
            <param name="fieldName">The name used to access this field.</param>
            <param name="metadata">The metadata for this field.</param>
            <param name="description">The description of this field. Can be null.</param>
            <param name="type">The type of this field.</param>
            <param name="primaryKey">true if this field is the dataset primary key.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetField.#ctor(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetField.FieldName">
            <summary>
            The name used to access this field.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetField.FieldType">
            <summary>
            How this field is generated.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetField.Metadata">
            <summary>
            The metadata for this field.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetField.Description">
            <summary>
            The description for this dataset.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetField.PrimaryKey">
            <summary>
            true if this field is the dataset primary key.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetField.ToXml(System.Xml.XmlWriter)">
            <summary>
            Serialize this object.
            </summary>
            <param name="xmlWriter"></param>
            <returns>The set of elements representing this object.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetField.ToString">
            <summary>
            Return the field's name. This is used in combo box displays.
            </summary>
            <returns>The field's name.</returns>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DatasetParameter">
            <summary>
             A parameter for the dataset select.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.DatasetParameter.#ctor(System.String,System.Object)">
            <summary>
            Ctreat the object.
            </summary>
            <param name="name">The name of this parameter.</param>
            <param name="value">The value for this parameter.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetParameter.Name">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetParameter.Value">
            <summary>
            The value for this parameter. This will normally be a String, DateTime, Decimal, Boolean, or an int/float.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.DatasetParameter.Description">
            <summary>
            The description for this dataset.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DataSourceWrapper">
            <summary>
            Utilities for the C# datasources.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE">
            <summary>
            How to handle parameter substitution in selects. The int values of these must match DataSourceProvider.java.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE.SUBSTITUTION">
            <summary>All ${var...} is handled via string substitution. If the var does NOT start with an underscore, it will use escapes.</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE.PARAMETER_PLUS">
            <summary>All ${var...} is handled via setParameter() unless the var starts with an underscore like ${_var...}</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE.PARAMETER_ONLY">
            <summary>All ${var...} is handled via setParameter()</summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.FilterBase">
            <summary>
            Base class for SelectFilter and SelectList. Objects of this type can be passed as Map.Entry to
            DataSourceProvider.setMap().
            
            If getGlobalMetaIdentifier is set this list/filter will be applied to any select that uses the column/node
            defined in getGlobalMetaIdentifier and will add a condition for this item.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER">
            <summary>
            How to override the sort for this item in the select.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER.NO_OVERRIDE">
            <summary>Do not change sort</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER.ASCENDING">
            <summary>sort ascending</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER.DESCENDING">
            <summary>sort descending</summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterBase.#ctor(WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER)">
            <summary>
            Create the object.
            </summary>
            <param name="sort">Set the sort order if we override it.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterBase.#ctor(WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER,System.String)">
            <summary>
            Create the object.
            </summary>
            <param name="sort">Set the sort order if we override it.</param>
            <param name="varName">The name of the var this filter is for.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterBase.Sort">
            <summary>
            Set the sort order. If set, we override the order for all "order by" items in the select.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterBase.VarName">
            <summary>
            The name of the var this filter is for.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterBase.IsApplyGlobally">
            <summary>
            true if this select is to be applied to all tags that include the getGlobalMetaIdentifier column/node.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterBase.GlobalMetaIdentifier">
            <summary>
            The meta identifier for a global select. For SQL this is [dbo.]table.column using the raw values (no surrounding
            spaces) and for XML it is the full XPath to that node. In the case of XPath this must be a simplistic
            node/node/@attribute. No functions [conditions], etc.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterBase.setGlobal(System.String)">
            <summary>
            Set to apply globally with this metadata. isApplyGlobally is set to true on this call. For SQL this is
            [dbo.]table.column using the raw values (no surrounding spaces) and for XML it is the full XPath to that
            node. In the case of XPath this must be a simplistic node/node/@attribute. No functions [conditions], etc.
            </summary>
            <param name="metaIdentifier">The meta identifier for a global select. If you are using aliases (SQL), this 
            is the actual table.column, NOT the alias.</param>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.FilterCondition">
            <summary>
            A specialized filter value for a select parameter. The filter(s) in this object will be substituted in as the
            select condition on any select that uses the ${var} in the select where the "var" is the key for this value as
            passed to DataSourceProvider.setMap().
            
            If passed 0 filters that will replace the select condition with true so that all rows are returned.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.#ctor(WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER)">
            <summary>
            Create the object.
            </summary>
            <param name="sort">Set the sort order if we override it.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.#ctor(WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER,System.String,System.Collections.Generic.IEnumerable{WindwardInterfaces.net.windward.datasource.FilterCondition.Condition},System.Boolean)">
            <summary>
            Create the object.
            </summary>
            <param name="sort">Set the sort order if we override it.</param>
            <param name="varName">The name of the var this filter is for. If you are using aliases (SQL), this is the actual 
            table.column, NOT the alias.</param>
            <param name="conditions">The conditions for this filter.</param>
            <param name="_isAndConditions">true if and the conditions, false if or them.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Conditions">
            <summary>
            The conditions in this filter.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.IsAndConditions">
            <summary>
            true if conditions are to be and-ed, false if to be or-ed.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.ToString">
            <summary>
            a string representation of the object.
            </summary>
            <returns>a string representation of the object.</returns>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition">
            <summary>
            An individual condition in the filter.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION">
            <summary>
            The conditions operation - "x OPERATION y".
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.NONE">
            <summary>no op</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.EQUALS">
            <summary>equal</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.NOT_EQUALS">
            <summary>not equal</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.GREATER_THAN">
            <summary>greater than (SQL: date/number only, XML: number only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.GREATER_THAN_OR_EQUAL">
            <summary>greater than or equal (SQL: date/number only, XML: number only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.LESS_THAN">
            <summary>less than (SQL: date/number only, XML: number only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.LESS_THAN_OR_EQUAL">
            <summary>less than or equals (SQL: date/number only, XML: number only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.BEGIN_WITH">
            <summary>starts with (text only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.NOT_BEGIN_WITH">
            <summary>does not start with (text only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.END_WITH">
            <summary>ends with (text only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.NOT_END_WITH">
            <summary>does not end with (text only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.CONTAINS">
            <summary>contains (text only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.NOT_CONTAINS">
            <summary>does not contain (text only)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.LIKE">
            <summary>like (no wildcards added, but existing ones respected)</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION.NOT_LIKE">
            <summary>not like (no wildcards added, but existing ones respected)</summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.DATA_TYPE">
            <summary>
            The data type of the value.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.DATA_TYPE.STRING">
            <summary>Filtering a string.</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.DATA_TYPE.NUMBER">
            <summary>Filtering a number.</summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.DATA_TYPE.DATE_TIME">
            <summary>Filtering a date.</summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.#ctor(System.String,WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION,System.Object)">
            <summary>
            A condition for the filter.
            </summary>
            <param name="fieldName">The column (SQL) or node (XML) to compare on. 
            If you are using aliases (SQL), this must use the alias.</param>
            <param name="opCode">The operation to use.</param>
            <param name="value">The value for the filter.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.#ctor(System.String,WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION,System.String)">
            <summary>
            A condition for the filter with a string value.
            </summary>
            <param name="fieldName">The column (SQL) or node (XML) to compare on. 
            If you are using aliases (SQL), this must use the alias.</param>
            <param name="opCode">The operation to use.</param>
            <param name="value">The value for the filter.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.#ctor(System.String,WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION,System.DateTime)">
            <summary>
            A condition for the filter with a datetime value.
            </summary>
            <param name="fieldName">The column (SQL) or node (XML) to compare on. 
            If you are using aliases (SQL), this must use the alias.</param>
            <param name="opCode">The operation to use.</param>
            <param name="value">The value for the filter.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.#ctor(System.String,WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION,System.Decimal)">
            <summary>
            A condition for the filter with a number value.
            </summary>
            <param name="fieldName">The column (SQL) or node (XML) to compare on. 
            If you are using aliases (SQL), this must use the alias.</param>
            <param name="opCode">The operation to use.</param>
            <param name="value">The value for the filter.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.FieldName">
            <summary>
            The column (SQL) or node (XML) to compare on. 
            If you are using aliases (SQL), this must use the alias.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OpCode">
            <summary>
            The OPERATION to use.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.SqlOpCode">
            <summary>
            The text string for the op code in a SQL statement.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.XpathOpCode">
            <summary>
            The text string for the op code in an XPath statement. Throws an exception on the opcodes that require
            a function.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.Value">
            <summary>
            The value for the filter.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.ValueAsString">
            <summary>
            The value for the filter as a string.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.ValueAsNumber">
            <summary>
            The value for the filter as a number.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.ValueAsDateTime">
            <summary>
            The value for the filter as a date_time.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.ValueAsSqlWildcards">
            <summary>
            For the operations BEGIN_WITH, NOT_BEGIN_WITH, END_WITH, NOT_END_WITH, CONTAINS, NOT_CONTAINS - and
            the value is a string, it will add wildcards as appropiate. For all other cases it returns the value.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.Type">
            <summary>
            The data type.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.ToString">
            <summary>
            a string representation of the object.
            </summary>
            <returns>a string representation of the object.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.getOpCodeText(WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION[])">
            <summary>
            Get the text strings to match the opcode list.
            </summary>
            <param name="opCodes">Op codes we need strings for.</param>
            <returns>Matching strings.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.getOpCodeText(WindwardInterfaces.net.windward.datasource.FilterCondition.Condition.OPERATION)">
            <summary>
            Get the text string to match the opcode.
            </summary>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.FilterList">
            <summary>
            A specialized list value for a select parameter. The list of items must be of type String, Number, or Date and these
            values will be substituted in as the select condition on any select that uses the ${var} in the select where the
            "var" is the key for this value as passed to DataSourceProvider.setMap().
            
            A list with no items is an error.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.FilterList.#ctor(WindwardInterfaces.net.windward.datasource.FilterBase.SORT_ORDER,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Create the object.
            </summary>
            <param name="sort">Set the sort order if we override it.</param>
            <param name="varName">The name of the var this filter is for.</param>
            <param name="items">The items in this list. The elements are the parameters to set for the ${var} in the select.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.FilterList.Items">
            <summary>
            The items in this list. The elements are the parameters to set for the ${var} in the select.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.IDataSourceMetaData">
            <summary>
            Returns metadata about the node the implementing DataSourceNode class holds.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.IDataSourceMetaData.GetMetaData(net.windward.tags.BaseTag,System.Int32,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Calls the select for a tag and returns the nodes returned by the select.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="index">For a chart tag this is which graph in the chart to run the select on.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The metadata for the select.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.IDataSourceMetaData.GetForEach(net.windward.tags.ForEachTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a forEach select. This always returns a .NET DataTable or XmlList.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.IDataSourceMetaData.GetQuery(net.windward.tags.BaseTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a query select. This always returns a .NET DataTable or XmlList
            </summary>
            <param name="tag">The tag to run. Must be a QueryTag or SwitchTag.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.IDataSourceMetaData.GetSet(net.windward.tags.SetTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a set. This always returns a .NET DataTable or XmlList.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.IDataSourceMetaData.AdjustSelect(System.String,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Will return the select that will be passed down to the database with all the ${vars}, etc substituted in.
            </summary>
            <param name="select">The select to adjust.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The adjusted select.</returns>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.IDataSourceProviderMetaData">
            <summary>
            A datasource provider that has the AutoTag metadata parts also.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.IDataSourceProviderMetaData.RootNode">
            <summary>
            Returns the root node for this data set. Outside of forEach loops this is the node all tag requests will be
            evaluated against.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.IDataSourceProviderMetaData.Properties">
            <summary>
            All of the properties for this datasource connection. Includes the password unencrypted.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.MetaDataElement">
            <summary>
            This represents a node of metadata used by AutoTag. This data can be SQL tables, XML lists, or a data element in
            a user created datasource.
            </summary>
        </member>
        <member name="T:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE">
            <summary>
            What type of node it is.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.OTHER">
            <summary>
            A type of node that does not fit any of the pre-defined types.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.TABLES">
            <summary>
            A SQL set of tables or equivilent (views, stored procedures).
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.TABLE">
            <summary>
            A SQL table or equivilent (table, stored procedure).
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.COLUMN">
            <summary>
            A SQL column or equivilent (stored procedure parameter).
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.NODE">
            <summary>
            An XML node or equivilent.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.ATTRIBUTE">
            <summary>
            An XML attribute or equivilent.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.STATUS">
            <summary>
            The status of a datasource such as an error was returned on a query.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.STAT">
            <summary>
            The statistics of a query such as the number of nodes returned.
            </summary>
        </member>
        <member name="F:WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE.VALUE">
            <summary>
            The value of a given node in the datasource.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.MetaDataElement.#ctor(System.String,System.String,System.String,System.String,System.Data.DbType,WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE)">
            <summary>
            Create a MetaData object.
            </summary>
            <param name="name">The name of the node such as the table or column name. This is the name as used so if a column has an alias, this is the alias.</param>
            <param name="fullName">The full name of this node. So for a column it is actually schema.table.column. null if same as name.</param>
            <param name="select">The select that created this node. This can be null.</param>
            <param name="description">The description of the node from the datasource metadata. Null if there is no description.</param>
            <param name="dbType">The data type.</param>
            <param name="metaType">One of the NODE_TYPE enums.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.MetaDataElement.#ctor(System.String,System.String,System.String,System.String,System.Data.DbType,WindwardInterfaces.net.windward.datasource.MetaDataElement.NODE_TYPE,System.Collections.Generic.IEnumerable{WindwardInterfaces.net.windward.datasource.MetaDataElement})">
            <summary>
            Create a MetaData object.
            </summary>
            <param name="name">The name of the node such as the table or column name. This is the name as used so if a column has an alias, this is the alias.</param>
            <param name="fullName">The full name of this node. So for a column it is actually schema.table.column. null if same as name.</param>
            <param name="select">The select that created this node. This can be null.</param>
            <param name="description">The description of the node from the datasource metadata. Null if there is no description.</param>
            <param name="dbType">The data type.</param>
            <param name="metaType">One of the NODE_TYPE enums.</param>
            <param name="children">The children nodes of this node. For example the column nodes are children of the table node.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.MetaDataElement.Clone(System.String)">
            <summary>
            Clones the MetaData object. 
            </summary>
            <param name="newSelect">New select to be used (Optional)</param>
            <returns></returns>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.MetaDataElement.DoesRemapResult(System.Object)">
            <summary>
            Looks up dictionary for if data remaps
            intended for use with enums to real names
            </summary>
            <param name="result">Data result to check for remap.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.MetaDataElement.DataRemapResult(System.Object)">
            <summary>
            Looks up dictionary for remapped data
            intended for use with enums to real names
            </summary>
            <param name="result">Data result to check for remap.</param>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.Properties">
            <summary>
            All the displayed properties for this metadata. Changing the returned values has no effect on this object.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.Name">
            <summary>
            The name of the node such as the table or column name. This is the name as used so if a column has an alias, this is the alias.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.FullName">
            <summary>
            The full name of this node. So for a column it is actually schema.table.column.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.Select">
            <summary>
            The select that created this node. This can be null.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.SubSelect">
            <summary>
            The select stripped of the ${var. and } part.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.Description">
            <summary>
            The description of the node from the datasource metadata. Null if there is no description.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.DataType">
            <summary>
            The DbType for this node.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataBlob">
            <summary>
            True if the DataType is a blob of some kind.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataBoolean">
            <summary>
            True if the DataType is a boolean.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataCurrency">
            <summary>
            True if the DataType is a currency number. IsDataDecimal also returns true.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataDate">
            <summary>
            True if the DataType is a date. Does not return true for time or offset.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataDecimal">
            <summary>
            True if the DataType is a decimal number. Will return true for a currency.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataInteger">
            <summary>
            True if the DataType is a whole number type from byte up to int64 (and larger someday).
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataNumber">
            <summary>
            True if a whole or decimal number.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.IsDataString">
            <summary>
            True if the DataType is a string.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.MetaType">
            <summary>
            The NODE_TYPE for this node.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.Children">
            <summary>
            The children nodes of this node. For example the column nodes are children of the table node.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.FieldSelected">
            <summary>
            True if this field is used in it's parent dataset. Used when configuring datasets.
            </summary>
        </member>
        <member name="P:WindwardInterfaces.net.windward.datasource.MetaDataElement.FieldPrimaryKey">
            <summary>
            True if this field is the primary key in it's parent dataset. Used when configuring datasets.
            The primary key is the field used in a B.I. select for the dataset. The other fields are for display only.
            </summary>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.MetaDataElement.ToXml(System.Xml.XmlWriter)">
            <summary>
            Write this out to XML (for serialization).
            </summary>
            <param name="xmlWriter">The writer to serialize to.</param>
        </member>
        <member name="M:WindwardInterfaces.net.windward.datasource.MetaDataElement.FromXml(System.Xml.XmlElement)">
            <summary>
            Read the xml to deserialize this object.
            </summary>
            <param name="elem">The parent element for this part of the XML.</param>
            <returns>The extracted metadata.</returns>
        </member>
    </members>
</doc>
