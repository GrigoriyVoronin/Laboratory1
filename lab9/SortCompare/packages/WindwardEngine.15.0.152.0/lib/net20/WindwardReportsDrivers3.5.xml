<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WindwardReportsDrivers3.5</name>
    </assembly>
    <members>
        <member name="T:net.windward.VersionNumbers">
            <summary>Version numbers for Windward Reports and AutoTag</summary>
        </member>
        <member name="F:net.windward.VersionNumbers.VERSION_STR">
            <summary>Version as a full string</summary>
        </member>
        <member name="F:net.windward.VersionNumbers.ARROW_VERSION_STR">
            <summary>Arrow version as a full string</summary>
        </member>
        <member name="F:net.windward.VersionNumbers.ARROW_MAJOR_VERSION_STR">
            <summary>Arrow resource version. DO NOT CHANGE; changing this will require an updating user to re-add all web parts</summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.ChartInfo">
            <summary>
            This is attached to the ChartTag and is all the data we need to carry with it for events.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.ChartInfo.#ctor">
            <summary>
            Create an empty object with 3 Axis objects.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.chart.ChartInfo.LabelFormat">
            <summary>
            The layout format for the label using {S}, {C}, {V}, and {%}. On a set converts it to {)}, {1}, {2}, {3}
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.chart.ChartInfo.LabelNumberFormat">
            <summary>
            The formatting of every {C} and {V} in the LabelFormat.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.chart.ChartInfo.LabelLocaleName">
            <summary>
            The locale for the label number format.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.chart.ChartInfo.LableLocale">
            <summary>
            The locale for the label number format.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.chart.ChartInfo.Axis">
            <summary>
            The formatting info for each axis. This is always a [3] array.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.ThemeInfo">
            <summary>
             Class that reads from an Office theme and produces the correct color and fonts for the MS .NET chart controls to use
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.ThemeInfo.ThemeColors">
            <summary>
             All of the theme colors set by a Microsoft Office theme
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.ThemeInfo.GetThemeColorFromString(System.String,net.windward.format.pptx.Theme)">
            <summary>
             Generate a Color from a theme color and it's tint/darken
            </summary>
            <param name="colorType">String containing the color information</param>
            <returns>The generated Color</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.ThemeInfo.GetHeadingFont">
            <summary>
             Get the defined heading font for an Office theme
            </summary>
            <returns>The heading font</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.ThemeInfo.GetBodyFont">
            <summary>
             Get the defined body font for an Office theme
            </summary>
            <returns>The body font</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.ThemeInfo.TintColor(System.Drawing.Color,System.Single)">
            <summary>
             Tints or shades a color by a given percentage
            </summary>
            <param name="color">Color to modify</param>
            <param name="tintAmount">Amount to modify (tint if 'tint' gt 0; shade of 'tint' lt 0); '10' means tint by 10%</param>
            <returns></returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.ChartStyleTools">
            <summary>
             Class for applying a chart style to a chart
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.ChartStyleTools.ApplyChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,net.windward.format.pptx.Theme)">
            <summary>
             Applies a chart style to a given chart
            </summary>
            <param name="chart">Given chart</param>
            <param name="style">Chart style; in this case a number from 1 to 48 stored as a string</param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.DatasetTools">
            <summary>
            Converts chart data to the data format DevExpress needs.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.DatasetTools.createDatasets(net.windward.chart.ChartDataSet,net.windward.tags.ChartTag)">
            <summary>
            Create the MS Chart Datasets. All matching data (same chart type and axis) will be merged together.
            </summary>
            <param name="data">The data to chart.</param>
            <param name="tag">The tag.</param>
            <returns>The datasets to chart.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.FormatTools">
            <summary>
            Handles formatting for MS .NET charts.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.FormatTools.ApplyFormat(net.windward.tags.ChartTag,System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,java.util.Locale)">
            <summary>
            Applies the format overrides in the chart
            </summary>
            <param name="tag">The chart tag. Get the overrides from this.</param>
            <param name="chart">The chart we are rendering to.</param>
            <param name="dpi">The Dots Per Inch of the final chart.</param>
            <param name="locale">The locale to generate the labels in.</param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.PlotData">
            <summary>
            A Dataset and it's associated properties.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.PlotData.#ctor(WindwardReportsDrivers.net.windward.chart.PlotData,System.Boolean)">
            <summary>
            Create a cloned object
            </summary>
            <param name="src">The object to clone.</param>
            <param name="deepCopy">true if a deep copy of the Series, false if shallow.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.PlotData.#ctor(net.windward.tags.ChartTag,System.Int32)">
            <summary>
            Create the object from a chart tag.
            </summary>
            <param name="tag">The chart tag with the settings</param>
            <param name="ind">The graph in the chart this is for.</param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.chart.RenderChart">
            <summary>
            This class renders a chart once. It exists to carry data into the events of the ChartControl.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.RenderChart.buildThumbnails(System.String)">
            <summary>
             Build thumbnails of all styles for a chart type.
            </summary>
            <param name="command">The type:subType command for the desired chart. The subtype is ingnored.</param>
            <returns>Thumbnails of each style.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.chart.RenderChart.applyLayout(net.windward.tags.ChartTag,WindwardReportsDrivers.net.windward.chart.PlotData[],net.windward.chart.ChartDataSet)">
            <summary>
            Applies the layout overrides in the chart
            </summary>
            <param name="tag">The chart tag. Get the overrides from this.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.GetQueryHelper">
            Gets the query helper from the subclass.
            @return
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.close">
            Clean up resources. This is datasource specific, so it needs to be implemented every time.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.getQueryMode(System.String,net.windward.tags.BaseTag)">
            Gets the query mode of a select. This is datasource specific, so it needs to be implemented every time.
            @param query
            @param tag The tag this select is for. This may be null.
            @return
            @throws DataSourceException
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.Properties">
            <summary>
            All of the properties for this datasource connection. Includes the password unencrypted.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.getDatasourceName">
            <summary>
            Returns the name of this type in the form "sql", "xml", etc.
            </summary>
            <returns>"mongodb"</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.getNativeVariable(net.windward.datasource.DataSourceNode[],System.String)">
            Gets the variable from a data provider on the stack. The stack is queried in order from top to bottom and if
            the provider in turn owns the variable its value is returnd.
            The base implementation simply returns null. Override it in the derived provider.
            @param stack The current stack of data providers.
            @param var A variable to look up. It's in the form of ${...}.
            @return The variable's value or null if the variable does not exist.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.getMap">
            <summary>
            Returns the map of variables for this datasource.
            </summary>
            <returns>
            the map of variables for this datasource.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.approveDenyModifySelect(net.windward.tags.BaseTag)">
            <summary>
            Verifys that a tag select is approved by a user defined callback
            Or denies by throwing a DatasourceException or modifies the select
            </summary>
            <param name="xmlTag"></param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.setMap(java.util.Map)">
            <summary>
            Sets the map that is used for ${variable} substitution. The map key values cannot
            have any of the characters ${} in them. When ${key} is found in any tag, it is replaced with the matching value.
            The value can be a string, number (int, float, etc), or datetime. The map is copied
            so on return changes to the passed in map will not affect the data source.
            </summary>
            <param name="map">The map of string/value pairs. </param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.setDatasets(System.Object[])">
            <summary>
            Set the datasets to use with this datasource. This will overwrite datasets from previous calls to this method.
            @param datasets The datasets to use. Can be null to turn off datasets. This is a DatasetBase[] but because of
            how the .NET engine is structured, we need to declare it as an object.
            </summary>
            <param name="datasets"></param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.getTagAttributes">
            <summary>
            Returns the allowed attributes for all tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.GetNativeVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.String)">
            <summary>
            Gets the variable from a data provider on the stack. The stack is queried in order from top to bottom and if
            the provider in turn owns the variable its value is returnd.
            The base implementation simply returns null. Override it in the derived provider.
            </summary>
            <param name="stack">The current stack of data providers.</param>
            <param name="var">A variable to look up. It's in the form of ${...}.</param>
            <returns>The variable's value or null if the variable does not exist.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.AdjustSelect(System.String,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Will return the select that will be passed down to the database with all
            the ${vars}, etc substituted in.
            </summary>
            <param name="select">The select to adjust.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document
                node so this will always have length of at least 1.</param>
            <returns>The adjusted select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.GetForEach(net.windward.tags.ForEachTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It returns a DataTable of the rows a forEach tag will return.
            </summary>
            <param name="tag">The ForEach tag.</param>
            <param name="stack">The node stack at the forEach tag location.</param>
            <returns>The DataTable of the rows returned.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.GetQuery(net.windward.tags.BaseTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It returns a DataTable of the row a query tag will return. Even if the select in a
            query could return multiple rows, this returns just the first row.
            </summary>
            <param name="tag">The query tag.</param>
            <param name="stack">The node stack at the query tag location.</param>
            <returns>The DataTable with the row returned.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.GetSet(net.windward.tags.SetTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It returns the text a set tag will return.
            </summary>
            <param name="tag">The set tag.</param>
            <param name="stack">The node stack at the forEach tag location.</param>
            <returns>The result of a set tag.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.GetMetaData(net.windward.tags.BaseTag,System.Int32,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Calls the select for a tag and returns the nodes returned by the select.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="index">For a chart tag this is which graph in the chart to run the select on.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document
                node so this will always have length of at least 1.</param>
            <returns>The metadata for the select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.isSelect(System.String,System.Boolean)">
            <summary>
            Returns if the select is actually a select statement. Non sql like datasources should override this method
            </summary>
            <param name="select"></param>
            <param name="textIsNode"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            gets the query mode non sql like datasources should override
            </summary>
            <param name="query"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.AbstractDataSource.AbstractDataSourceNode.getIterator">
            <summary>
            gets the iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceQueryHelper.GetQueryResults(System.String)">
            <summary>
            Given a select statement, we get the results from the database.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceQueryHelper.SubstituteVariables(System.String[],System.Object[],System.String)">
             <summary>
             Called by the AbstractDataSource to substitute values into a select statement. Given select:
            	    SELECT ${var1} FROM Accounts WHERE Name = ${var2}
                 we create the query parts array: ["SELECT ", " FROM Accounts WHERE Name = ", ""]
                  and the toInsert array: ["Id", "Frank"]
                  
             This function then returns: SELECT Id FROM Accounts WHERE name = 'Frank'
             </summary>
            <param name="queryParts">The query string broken up into parts such that between each element, 
                an element of toInsert is inserted (possibly with formatting).</param>
            <param name="toInsert">The array of items to insert. toInsert.length is equal to (queryParts.length - 2)</param>
            <param name="querytext"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceQueryHelper.IsSelect(System.String)">
            <summary>
            Called by the AbstractDataSourceProvider to determine if a string is a select. Note that this
            string may have un-substituted variables, so it may not yet be a valid select
            </summary>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceResultRow.GetFieldNames">
            <summary>
            Gets all of the field names (columns) of elements in this row
            </summary>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceResultRow.GetField(System.String)">
            <summary>
            Gets a field from this row. Note that this could return a IDataSourceResultSet
            in the case of nested objects.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceResultSet.GetRow(System.Int32)">
            <summary>
            Gets a row by its index. Note that we will almost always move linearly through all
            of the rows, so you may wish to use an iterator to get the next row (along with a 
            counter to verify your position). This will depend on how you manipulate your data.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceResultSet.Query">
            <summary>
            The query used to create the result set
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceResultSet.GetSize">
            <summary>
            Gets the number of rows in this result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceResultSet.GetDataTable(net.windward.tags.BaseTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Gets the full result set as a DataTable. This method is used by the abstract datasource
            to populate wizard results in AT.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.IDataSourceResultSet.GetColumnType(System.String)">
            <summary>
            Used for metadata, returns the type of the field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.salesforce.SFQueryHelper.SalesforceResultSet.GetField(WindwardReportsDrivers.SalesForce.sObject,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets a field from an sObject. 
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <param name="exprNum">If we have an aggregate function (which does not have an alias) the results are returned in the exprX field.
                So: SELECT COUNT(Id), MAX(Amount) FROM Account, gives us two new fields: expr0 and expr1.
                But: SELECT COUNT(Id) c, MAX(Amount) max, gives us the two fields: c and max.
            </param>
            <param name="finalField"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.salesforce.SFQueryHelper.SalesforceResultSet.TryCastField(System.String)">
            <summary>
            Only used when we get the results of an aggregation function, from which it is very hard to extract the metadata.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.salesforce.SFDataSourceProvider.getDatasourceName">
            <summary>
            Returns the name of this type in the form "sql", "xml", etc.
            </summary>
            <returns>"sfdc"</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.abstract_datasource.salesforce.SFDataSourceProvider.close">
            <summary>
            Called when processing is complete. Used to close any resources opened by this object.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset">
            <summary>
            A dataset, that is part of a datasource, to be passed to AdoDataSource.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{WindwardInterfaces.net.windward.datasource.DatasetField},System.Collections.Generic.List{WindwardInterfaces.net.windward.datasource.DatasetParameter})">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="selectAll">The select to get this dataset.</param>
            <param name="selectAllFormat">The format for displaying the returned vars.</param>
            <param name="selectCount">A select that will return a count of the number of possible values.</param>
            <param name="selectCheck">A select that will return if a given value is one of the list of possibles.</param>
            <param name="timeout">The timeout for this dataset. 0 is infinite.</param>
            <param name="fields">The field mapping for this dataset.</param>
            <param name="parameters">The parameters for this dataset.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="select">The select to get this dataset.</param>
            <param name="timeout">The timeout for this dataset. 0 is infinite.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.#ctor(WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">The object to copy.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.Timeout">
            <summary>
            The timeout for this dataset. 0 is infinite.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.ReadRdl(System.String,System.IO.Stream)">
            <summary>
            Get the datasets in a SSRS RDL file.
            </summary>
            <param name="dataSourceName">The name of the datasource to read.</param>
            <param name="rdlFile">The stream containing the RDL file.</param>
            <returns>The dataset(s) for the requested datasource.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.GetDbType(System.String)">
            <summary>
             Convert a RDL parameter type to a DbType.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>The equivilent DbType.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.GetDbType(System.Type)">
            <summary>
             Convert a variable type to a DbType.
            </summary>
            <param name="type">The variable type.</param>
            <returns>The equivilent DbType.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.#ctor(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataset.ToXml(System.Xml.XmlWriter)">
            <summary>
            Serialize this object.
            </summary>
            <param name="xmlWriter">The xml document serializing to.</param>
            <returns>The set of elements representing this object.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.ado.AdoDatasetField">
            <summary>
            A field in an ADO dataset.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDatasetField.#ctor(System.String,WindwardInterfaces.net.windward.datasource.MetaDataElement,System.String,WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE,System.Boolean)">
            <summary>
            Create a field object for a column in the containing dataset.
            </summary>
            <param name="fieldName">The name used to access this field.</param>
            <param name="metadata">The metadata for this field.</param>
            <param name="description">The description of this field. Can be null.</param>
            <param name="type">The type of this field.</param>
            <param name="primaryKey">true if this field is the dataset primary key.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDatasetField.#ctor(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource">
            <summary> This supplies a data source to Windward Reports using ADO.NET. The DataSourceProvider class is built on the concept of
            xml nodes. For this class, a node is a DbDataReader returned by a ADO call to DbCommand.ExecuteReader().<br/>
            
            An xml file always has the concept of the current node. This is not the case with a sql database - there is no current
            DbDataReader. A DbDataReader is only generated by the wr:query and the wr:foreach tags. Therefore, all other tags only
            make sense if they use the var attribute from a query or foreach to identify the DbDataReader they are to be applied
            to. A tag not identifying a DbDataReader will throw an exception.<br/>
            
            A query or foreach tag can reference a var from another query or foreach tag using ${var.item}.. An XPath query can
            describe a node as well as an element. In this class a query defines a DbDataReader and is only an element.<br/>
            
            Also, with xml you can use xpath in each tag performing complex logic in determining what text to return. It
            is very different for sql. The foreach or query can have complex logic. But the other tags can only return
            an element from a result set that the foreach/query earlier returned or do a single select.<br/>
            
            When using a var (&lt;wr:forEach var="result"/&gt;) that identifies a result set, you can use the following in a tag:<ul>
            <li>${result[1]} - is column element [1] in the row presently on (1-based)</li>
            <li>${result[2][1]} - is column element [1] in the row + 2 presently on (0-based)</li>
            <li>${result.NAME} - is the column element named NAME in the row presently on</li>
            <li>${result[2].NAME} - is the column element named NAME in the row + 2 presently on</li>
            <li>${result.columnNames[1]} - is the name of column 1 (1-based)</li>
            </ul>
            
            The use of result[N] where N is a row number is limited to values of 0...N where N is step-1. result[1] is treated
            as column 1 of the row presently on, it is only result[0][1] and result[0].NAME that can hit rows other than the
            row presently on. This functionality requires a result set that can move to previous as well as next. If the ADO
            driver you use cannot handle a call to previous, you cannot use this functionality.
            
            An &lt;if select= ... &gt; will return true if the passed in select returns a DbDataReader with one or more rows. An
            &lt;if select="select count (*) from customers" <b>notEmpty="true"</b>&gt; will perform two steps. The first step is it will
            return false if there are no results returned. If results are returned it assumes the select is a count and will do a
            <code>return DbDataReader.getInt(1) > 0;</code>. This does not look at the select statement, it is the notEmpty="true" that
            puts it in this mode.
            
            </summary>
            <author>  David Thielen
            </author>
            <version>  4.0 3 November 2005
            </version>
        </member>
        <!-- Badly formed XML comment ignored for member "F:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.stripConditionsOnSchemaSelect" -->
        <member name="F:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.closeConnectionsImmediately">
            <summary>if true then we close connections when called. If false (the default), it's in a worker thread.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.getDatasourceName">
            <summary>
            Returns the name of this type in the form "sql", "xml", etc.
            </summary>
            <returns>"sql"</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoResult.#ctor(WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoResult)">
            <summary>
            copy constructor.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.#ctor(System.Type,System.String)">
            <summary> 
            Create a DataSourceProvider that uses Ado to access a SQL database. This constructor calls
            new IDbConnection(connectionString) to create a connection. Each forEach and query tag will also cause
            a connection to be created.
            
            Example:
            Access: typeof(System.Data.Odbc), "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=Northwind.mdb"
            DB2: typeof(IBM.Data.DB2), "server=db2.windwardreports.com;database=SAMPLE;Uid=demo;Pwd=demo;"
            Excel: typeof(System.Data.OleDb), "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=Northwind Mini - Data.xlsx;Extended Properties=\"Excel 12.0 Xml;HDR=YES\""
            MySql: typeof(MySql.Data.MySqlClient), "server=mysql.windwardreports.com;database=sakila;user id=demo;password=demo;"
            ODBC: typeof(System.Data.Odbc), "Driver={Sql Server};Server=localhost;Database=Northwind;User ID=test;Password=pass;"
            OleDB: typeof(System.Data.OleDb), "Provider=sqloledb;Data Source=localhost;Initial Catalog=Northwind;User ID=test;Password=pass;"
            Oracle: typeof(Oracle.DataAccess.Client), "Data Source=oracle.windwardreports.com:1521/HR;Persist Security Info=True;Password=HR;User ID=HR"
            Do not use System.Data.OracleClient - even Microsoft discourages its use.
            SqlServer: typeof(System.Data.SqlClient), "Data Source=mssql.windwardreports.com;Initial Catalog=Northwind;user=demo;password=demo;"
            </summary>
            <param name="type">The type of the IDbConnection driver. For example, for SqlServer this would be typeof(SqlConnection).</param>
            <param name="connectionString">The connection string used in the IDbConnection constructor.</param>
            <throws>  DataSourceException thrown if anything goes wrong. </throws>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.#ctor(System.String,System.String)">
            <summary>
            Create a DataSourceProvider that uses Ado to access a SQL database. This constructor calls
            DbProviderFactories.GetFactory(providerName) to get a provider and uses that provider and the connection
            string to create a connection. Each forEach and query tag will also cause
            a connection to be created.
            
            Example:
            Access: "System.Data.Odbc", "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=Northwind.mdb"
            DB2: "IBM.Data.DB2", "server=db2.windwardreports.com;database=SAMPLE;Uid=demo;Pwd=demo;"
            Excel: "System.Data.OleDb", "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=Northwind Mini - Data.xlsx;Extended Properties=\"Excel 12.0 Xml;HDR=YES\""
            MySql: "MySql.Data.MySqlClient", "server=mysql.windwardreports.com;database=sakila;user id=demo;password=demo;"
            ODBC: "System.Data.Odbc", "Driver={Sql Server};Server=localhost;Database=Northwind;User ID=test;Password=pass;"
            OleDB: "System.Data.OleDb", "Provider=sqloledb;Data Source=localhost;Initial Catalog=Northwind;User ID=test;Password=pass;"
            Oracle: "Oracle.DataAccess.Client", "Data Source=oracle.windwardreports.com:1521/HR;Persist Security Info=True;Password=HR;User ID=HR"
            Do not use System.Data.OracleClient - even Microsoft discourages its use.
            SqlServer: "System.Data.SqlClient", "Data Source=mssql.windwardreports.com;Initial Catalog=Northwind;user=demo;password=demo;"
            </summary>
            <param name="providerName">The name of the provider. For example, for SqlServer this would be "System.Data.SqlClient".</param>
            <param name="connectionString">The connection string used in the IDbConnection constructor.</param>
            <throws>  DataSourceException thrown if anything goes wrong. </throws>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.validateTag(net.windward.tags.BaseTag)">
            <summary> Verifys that a tag has all required attributes and no unknown attributes.
            
            </summary>
            <param name="xmlTag">The tag to check
            </param>
            <throws>  net.windward.tags.TagException thrown if illegal parameters passed in. </throws>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.approveDenyModifySelect(net.windward.tags.BaseTag)">
                    * Verifys that a tag select is approved by a user defined callback
                    * Or denies by throwing a DatasourceException or modifies the select
                     *
                     * @param xmlTag The tag to check
                    * @throws net.windward.env.DataSourceException
                    *          thrown if illegal parameters passed in.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.close">
            <summary> Called when processing is complete. Used to close any resources opened by this object. Will close the Ado
            connection if this object created the connection.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Determine the query mode of a given string
            </summary>
            <param name="query">Query string to determine the mode of.</param>
            <param name="tag">The tag this select is for. This may be null.</param>
            <returns>BaseTag.MODE_NONE, BaseTag.MODE_VALUE, BaseTag.MODE_EVALUATE, or BaseTag.MODE_SELECT</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.setDatasets(System.Object[])">
            <summary>
            Set the datasets to use with this datasource. This will overwrite datasets from previous calls to this method.
            </summary>
            <param name="datasets">The datasets to use. Can be null to turn off datasets. This is a AdoDataset[] but because of
            how the .NET engine is structured, we need to declare it as an object.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.getTagAttributes">
            <summary> Returns the allowed attributes for all tags.</summary>
            <returns> The tag attributes.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.getParamMode">
            <summary>
            Get the parameter substitution mode.
            </summary>
            <returns>
            the parameter substitution mode.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.setParamMode(System.Int32)">
            <summary>
            Set the parameter substitution mode.
            </summary>
            <param name="mode">the parameter substitution mode.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.setMap(java.util.Map)">
            <summary>
            Sets the map that is used for ${variable} substitution. The map key values cannot
            have any of the characters ${} in them. When ${key} is found in any tag, it is replaced with the matching value.
            The value can be a string, number (int, float, etc), or datetime. The map is copied
            so on return changes to the passed in map will not affect the data source.
            </summary>
            <param name="map">The map of string/value pairs. </param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.getMap">
            <summary>
            Returns the map of variables for this datasource.
            </summary>
            <returns>
            the map of variables for this datasource.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.getRootNode">
            <summary> Returns the root node for this data set. Outside of forEach loops this is the node all tag requests will be
            evaluated against.
            
            </summary>
            <returns> The root node.
            </returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.RootNode">
            <summary>
            Returns the root node for this data set. Outside of forEach loops this is the node all tag requests will be
            evaluated against.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.Properties">
            <summary>
            All of the properties for this datasource connection. May Include the password unencrypted.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode">
            <summary>
            Implementation of DataSourceNode for this datasource.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.#ctor(WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource,System.Data.IDataRecord)">
            <summary>
            Create the object.
            </summary>
            <param name="parent">Parent datasource.</param>
            <param name="ddr">DataRecord for this node.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.GetNativeVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.String)">
            <summary>
            Calls AdoNode.GetVariable() with an empty query.
            </summary>
            <param name="stack">The current stack of data providers.</param>
            <param name="var">A variable to look up. It's in the form of ${...}.</param>
            <returns>The variable's value or null if the variable does not exist.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.GetMetaData(net.windward.tags.BaseTag,System.Int32,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Return metadata info for this node. This is only called by AutoTag.
            </summary>
            <param name="tag">The tag for this node.</param>
            <param name="index">The chart index if it is a chart tag.</param>
            <param name="stack">The node stack at this point.</param>
            <returns>Metadata info for this node.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdjustSelect(System.String,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It is never called by the engine and can just throw an exception for
            a datasource written for the engine only. This will adjust a select statement to use the "column as alias"
            construct if there are multiple identical columns in the select.
            </summary>
            <param name="select">The select to adjust</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The adjusted select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.GetForEach(net.windward.tags.ForEachTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It returns a DataTable of the rows a forEach tag will return.
            </summary>
            <param name="tag">The ForEach tag.</param>
            <param name="stack">The node stack at the forEach tag location.</param>
            <returns>The DataTable of the rows returned.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.GetQuery(net.windward.tags.BaseTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It returns a DataTable of the row a query tag will return. Even if the select in a
            query could return multiple rows, this returns just the first row.
            </summary>
            <param name="tag">The query tag.</param>
            <param name="stack">The node stack at the query tag location.</param>
            <returns>The DataTable with the row returned.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.GetSet(net.windward.tags.SetTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It returns the text a set tag will return.
            </summary>
            <param name="tag">The set tag.</param>
            <param name="stack">The node stack at the forEach tag location.</param>
            <returns>The result of a set tag.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.isSelect(System.String,System.Boolean)">
            <summary>
            Returns true if the passed in string is a select, false if it's a value= or evaluate= string.
            </summary>
            <param name="select">The select.</param>
            <param name="textIsNode">not used.</param>
            <returns>true if a select, false if an evalute.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Determine the query mode of a given string
            </summary>
            <param name="query">Query string to determine the mode of.</param>
            <param name="tag">The tag this select is for. This may be null.</param>
            <returns>BaseTag.MODE_NONE, BaseTag.MODE_VALUE, BaseTag.MODE_EVALUATE, or BaseTag.MODE_SELECT</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getBitmap(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> Called when tag is of type BITMAP. Returns the fileimage of the bitmap from the datasource. Return a 0 length
            array for an empty bitmap. Return null if the requested node does not exist.
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <param name="state">The macro state of the report</param>
            <returns> A file image of the referenced bitmap.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getImport(net.windward.tags.ImportTag,net.windward.datasource.DataSourceNode[])">
            <summary> Called for an import tag. Returns the name of the resource to be parsed and inserted into the report. Windward
            Reports will process the returned string based on the tag type attribute. Return a 0 length string for an empty
            node. Return null if the requested node does not exist. Windward Reports uses the type and source attributes on
            this returned value. This method cannot affect those attributes.
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <returns> The text to insert into the report.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getLink(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary> Called for a link tag. Returns the link text that is the url for the link. Return a 0 length string
            for an empty node. Return null if the requested node does not exist.
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <returns> The url for a link.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getOut(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],java.util.Locale,net.windward.util.macro.IMacroState)">
            <summary> Called for an out tag. Returns the text to be inserted into the report. Return a 0 length string
            for an empty node. Return null if the requested node does not exist and there is no default value.
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <param name="locale">The locale to produce the output in.
            </param>
            <param name="state">The macro state of the report</param>
            <returns> The text to insert into the report.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getOutStream(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> Called for an out tag. Returns the raw bytes of a node. This is used to read a rtf or xml file from the database.
            Return a 0 length stream for an empty node. Return null if the requested node does not exist and there is no
            default value.
            
            </summary>
            <param name="tag">  The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <param name="state">The macro state of the report</param>
            <returns> The text to insert into the report.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getData(net.windward.tags.ChartTag,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary> Returns a set of data used to create a chart. The structure of this is tied tightly to the chart package.
            
            </summary>
            <param name="tag">  The wr:chart tag with the select setting to use.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <param name="locale">The locale to produce the output in.
            </param>
            <returns> The data used by the charting functions to create the chart.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.isExistingNode(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary> Return true if the passed in node exists. This should return true even if the passed in node is empty. This
            method needs to be fast.
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <returns> True if the node exists, false otherwise.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.evaluate(System.String,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> Evaluate an expression for the boolean result.
            
            </summary>
            <param name="text">The expression to evaluate.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <param name="state">The macro state of the report</param>
            <returns> true or false.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.isIf(net.windward.tags.IfTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> Called for an if tag. Returns if the node exists. This normally is identical to isExistingNode() but can be
            different as this determines if an &lt;wr:if ... &gt; tag will return true while isExistingNode is used
            in numerous other cases.
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <param name="state">The macro state of the report</param>
            <returns> True if the node exists, false otherwise.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.addSwitch(net.windward.tags.SwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for a switch tag. Adds this switch to the list of switch the document holds. This switch will continue 
            until the endSwitch is called.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <returns>true if no select. For a select, true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.isCase(net.windward.tags.CaseTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called for a case tag. Returns if the case is true. This normally is identical to isExistingNode() but can be 
            different as this determines if an &lt;wr:case ... &gt; tag will return true while isExistingNode is used 
            in numerous other cases.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <param name="state">The macro state of the report</param>
            <returns>True if the case is true, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.endSwitch(net.windward.tags.EndSwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called when a switch ends. Will pop the innermost switch off the internal stack.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.iterator(net.windward.tags.ForEachTag,net.windward.datasource.DataSourceNode[])">
            <summary> Called for a forEach tag. Returns an iterator used to walk through the nodes that match the forEach tag. It
            is the responsibility of this iterator to handle begin, step, and end in the tag. If there are no nodes, an
            iterator that will return false on the first call to hasNext() should be returned.<br/>
            Windward Reports will never request multiple simultaneous iterators from a DataSourceNode. When this method
            is called, any iterators from previous calls to this method are no longer in use. This restriction is critical
            for the functionality of the method getIterator().
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <returns> An iterator to walk the nodes that match.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getIterator">
            <summary>
            Returns the iterator presently in use for this node. This is <b>not</b> the method called when processing
            a forEach tag. The method called to process a forEach tag is iterator(). This method is called to get the
            iterator in use for a node.<br/>
            Windward Reports will never request multiple simultaneous iterators from a DataSourceNode. This restriction
            is critical for the functionality of this method.
            This is <b>not</b> the iterator that returned this in it's iteration. It is the iterator created by this node
            and is returning nodes 1 level higher in the node stack. For example, stack[0] holds the iterator for the
            node at stack[1]. And by definition, the node at the top of the stack cannot have an iterator (because if it
            did, the first node returned by that iterator would then be on the top of the stack).
            </summary>
            <returns>The iterator in use for this node. Will return null if no iterator is in use for this node.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.addQuery(net.windward.tags.QueryTag,net.windward.datasource.DataSourceNode[])">
            <summary> Called for a query tag. Adds this query to the list of queries the document holds. This query will continue
            to exist after this node is gone.
            
            </summary>
            <param name="tag">The values that identify the datasource node to read.
            </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <returns>true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.addSet(net.windward.tags.SetTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called for a set tag. Adds this set to the list of name:value pairs in the document map. This set will continue
            to exist after this node is gone. This is also called in psuedo mode (always a value=) for OutTags that have a var.
            </summary>
            <param name="tag">The tag with a name value pair.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.
            </param>
            <param name="state">The macro state of the report</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.close">
            <summary> We are done with this node. Used to close any resources opened by this object.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getCursor">
            <summary>
            Returns the underlying XPathNavigator this node presently holds.
            </summary>
            <returns>The underlying XPathNavigator this node presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getVariableValue(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a variable
            </summary>
            <param name="variable">The name of the variable</param>
            <param name="stack">Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getEquationData(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a data query for the equation system 
            </summary>
            <param name="quer">The data query</param>
            <param name="stack"> Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getDatasourceState(net.windward.datasource.DataSourceNode[])">
            <summary>
            Get the state of the datasource. Used by the debugger.
            </summary>
            <param name="stack">stack The stack of forEach loops in at this point. Node [0] is the root document node so this will always have length of at least 1.</param>
            <returns>The datasource state.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.getDataSourceProvider">
            <summary>
            The parent datasource.
            </summary>
            <returns>The parent datasource.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.parse(System.String,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.Boolean,System.Boolean,System.Collections.ArrayList@)">
            <summary>
            Parses the string attr and where it finds var and varStatus items from a DataSourceNode makes the appropiate
            substitution. The substitution is:<br/>
            For varStatus.count and varStatus.index it will substitute in the number. For varStatus.first and
            varStatus.last it will substitute in the word true() or false(). In both cases there is no spacing or quotes added,
            just the number or word.<br/>
            For var it will substitute in the text from the appropiate DbDataReader. Again, it will add no spacing or quotes.<br/>
            This starts with the innermost node and works out to the document root. So if two nodes have the same value
            for var and/or varStatus, it will use the inner one.
            </summary>
            <param name="attr">The string to be parsed for var and varStatus items.</param>
            <param name="stack">The stack of forEach nodes we are in at this point. stack[0] is the document root (which has no iterator).</param>
            <param name="addQuotes">If true put quote marks around strings.</param>
            <param name="isSelect">Is for a select statement</param>
            <param name="parameters">An array of objects that are the parameters for this select.</param>
            <returns>The substituted string.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator">
            <summary>
            The DataSourceIterator implementation for this datasource provider.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.#ctor(WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode,net.windward.tags.ForEachTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Create the iterator object.
            </summary>
            <param name="parent">The parent node iterating on.</param>
            <param name="tag">The tag requestiong the iteration.</param>
            <param name="stack">The node stack at the tag location.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.getTag">
            <summary> Return the forEach tag in use for this iterator. This is the tag that is the start of a block in the report that
            this iterator is iterating through.
            
            </summary>
            <returns> the forEach tag in use for this iterator.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.hasNext">
            <summary>
            Returns true if the iteration has more nodes. (In other words, returns true if next would return a
            node rather than throwing an exception.)
            </summary>
            <returns>true if the iterator has more elements.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.next">
            <summary>
            Returns the next node in the iteration. This will always return an object of type AdoNode.
            </summary>
            <returns>the next element in the iteration.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.getNode(System.Int32)">
            <summary> Returns the requested node from the set of nodes presently on. Index must be less than the step size. Unlike
            next() calling this method does not advance the dataset.
            
            </summary>
            <param name="offset">The offset from the base node on. A value of 0 is identical to the value returned by next.
            </param>
            <returns> The node at this offset.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.remove">
            <summary> This will throw an UnsupportedOperationException.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.getIndex">
            <summary> Return the index the iteration is on. This is a 0-based number of the index into the node list and counts all
            nodes including those skipped if step > 1. This is undefined before the first call to next and is 0 after the
            first call to next.
            
            </summary>
            <returns> The index presently on.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.getCount">
            <summary> Return the count the iteration is on. This is a 1-based number of the number of nodes returned so far. It only
            counts nodes returned. This is undefined before the first call to next and is 1 after the first call to next.
            
            </summary>
            <returns> The number of nodes returned so far..
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.isFirst">
            <summary> Return true if on the first node returned. This is undefined before the first call to next and is true after the
            first call to next.
            
            </summary>
            <returns> true if on the first node, false otherwise.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.isLast">
            <summary> Return true if on the last node returned. This is undefined before the first call to next and is true after the
            call to next which returns the last node that will be returned.
            
            </summary>
            <returns> true if on the last node, false otherwise.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.getResultSet">
            <summary>
            Returns the result set this iterator presently holds. This is implementation specific.
            </summary>
            <returns>the result set this iterator presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.ado.AdoDataSource.AdoNode.AdoIterator.close">
            <summary> We are done with this iterator. Used to close any resources opened by this object.</summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.DatasetFactory">
            <summary>
            Create driver specific datasets.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DatasetFactory.Factory(WindwardInterfaces.net.windward.datasource.DatasetBase.DB_TYPE,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{WindwardInterfaces.net.windward.datasource.DatasetField},System.Collections.Generic.List{WindwardInterfaces.net.windward.datasource.DatasetParameter})">
            <summary>
            Create the object.
            </summary>
            <param name="dbType">The type of dataset to create</param>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="selectAll">The select to get this dataset.</param>
            <param name="selectAllFormat">The format for displaying the returned vars.</param>
            <param name="selectCount">A select that will return a count of the number of possible values.</param>
            <param name="selectCheck">A select that will return if a given value is one of the list of possibles.</param>
            <param name="timeout">The timeout for this dataset. 0 is infinite.</param>
            <param name="fields">The field mapping for this dataset.</param>
            <param name="parameters">The parameters for this dataset.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DatasetFactory.ReadPod(System.IO.Stream,System.String)">
            <summary>
            Get the datasets in a Windward POD (.rdlx) file.
            </summary>
            <param name="rdlFile">The stream containing the POD file.</param>
            <param name="dataSourceName">The name of the datasource to read.</param>
            <returns>The dataset(s) for the requested datasource. Returns null if can't find the datasource. Returns [0] if no datasets.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DatasetFactory.Factory(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DatasetFactory.Factory(WindwardInterfaces.net.windward.datasource.DatasetBase.DB_TYPE,System.String,WindwardInterfaces.net.windward.datasource.MetaDataElement,System.String,WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE,System.Boolean)">
            <summary>
            Create a field object for a column in the containing dataset.
            </summary>
            <param name="dbType">Which type of datasource it is.</param>
            <param name="fieldName">The name used to access this field.</param>
            <param name="metadata">The metadata for this field.</param>
            <param name="description">The description of this field. Can be null.</param>
            <param name="type">The type of this field.</param>
            <param name="primaryKey">true if this field is the dataset primary key.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DatasetFactory.ScrubPassword(System.String)">
            <summary>
            Remove the password= from a connection string (for logging).
            </summary>
            <param name="connStr">The full connection string.</param>
            <returns>The connection without the password.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.DataSourceNodeBase">
            <summary>
            The base class for all data source providers to inherit from.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DataSourceNodeBase.GetNativeVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.String)">
            <summary>
            Gets the variable from a data provider on the stack. The stack is queried in order from top to bottom and if
            the provider in turn owns the variable its value is returnd.
            The base implementation simply returns null. Override it in the derived provider.
            </summary>
            <param name="stack">The current stack of data providers.</param>
            <param name="var">A variable to look up. It's in the form of ${...}.</param>
            <returns>The variable's value or null if the variable does not exist.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DataSourceNodeBase.LookupVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.String)">
            <summary>
            Looks up the variable on the stack.
            </summary>
            <param name="stack">The stack of data providers to look up in.</param>
            <param name="var">The variable to look up for.</param>
            <returns>The variable's value or null if the variable does not exist.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase">
            <summary>
            The base class for all .net datasources
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE">
            <summary>
            What method used to connect.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.IDENTITY">
            <summary>
            Use windows identity. This is also used for no username/password required.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.CREDENTIALS">
            <summary>
            Provide username and password.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.REST">
            <summary>
            REST protocol providing Accept and Content-Type.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.SHAREPOINT">
            <summary>
            Read from SharePoint - Forms Based Authentication mode.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.HTTP_AUTH">
            <summary>
            HTTP using one of the standard authentication types, Basic, Digest, Anonymous and NTLM
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.BASIC">
            <summary>
            HTTP using basic authentication, alias for HTTP_STANDARD_AUTH_TYPES
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.WINDOWS_AUTH">
            <summary>
            http request using windows authentication (NTLM and Negotiate)
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE.SECURITY_TOKEN">
            <summary>
            http request with an OAuth security token obtained externally
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.convertToInputStream(System.Object)">
            <summary>
            Used for cases where an evaluate can return a byte[] or other object and the engine needs the data as an InputStream.
            Converts if needed(does nothing if passed in an InputStream).
            </summary>
            <param name="data">The data that may need to be converted.</param>
            <returns>The data placed in an InoutStream.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.#ctor(java.io.InputStream)">
            <summary>
            Creates a JSON datasource from a Stream.
            </summary>
            <param name="file">The Stream of the JSON file</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.#ctor(java.io.InputStream,System.String)">
            <summary>
            Creates a JSON datasource from a Stream.
            </summary>
            <param name="file">The Stream of the JSON file</param>
            <param name="encoding">the character encoding of the stream</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creat a json data source.
            </summary>
            <param name="locationOrRawJson">can be a path or a json file</param>
            <param name="isLocation">true if path false if json literal</param>
            <param name="encoding">only matters if is location is true. this is the charater encoding of the file</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.#ctor(System.String,System.String,System.String)">
            <summary>
            Opens JSON datasource from a URL. The URL must already be escaped before passing it in.
            </summary>
            <param name="srcPath">The URL to open</param>
            <param name="username">The username for security.</param>
            <param name="password">The password for security.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Opens JSON datasource from a URL. The URL must already be escaped before passing it in.
            </summary>
            <param name="srcPath">The URL to open</param>
            <param name="encoding">The charter encoding of the json file you are downloading</param>
            <param name="username">The username for security.</param>
            <param name="password">The password for security.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.#ctor(System.IO.Stream)">
            <summary>
            Creates a JSON datasource from a Stream.
            </summary>
            <param name="file">The Stream of the JSON file</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.#ctor(System.String)">
            <summary>
            Opens JSON datasource from a URL. The URL must already be escaped before passing it in.
            </summary>
            <param name="srcPath">The URL to open</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.json.JsonDataSource.JsonDataNode.AddMetaDataNode(System.Collections.Generic.List{WindwardInterfaces.net.windward.datasource.MetaDataElement},WindwardInterfaces.net.windward.datasource.MetaDataElement)">
            <summary>
            This method will either add toAdd to the metaData list,
            or if a matching element already exists it will verfy that the one in the list has all of the children in the matching one.
            </summary>
            <param name="metaData"></param>
            <param name="toAdd"></param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.getDatasourceName">
            <summary>
            Returns the name of this type in the form "sql", "xml", etc.
            </summary>
            <returns>"mongodb"</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.close">
            <summary>
            Called when processing is complete.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.getMap">
            <summary>
            Returns the map of variables for this datasource.
            </summary>
            <returns>
            the map of variables for this datasource.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.getParamMode">
            <summary>
            Get the parameter substitution mode.
            </summary>
            <returns>
            the parameter substitution mode.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Gets the mode for evaluating the query
            </summary>
            <param name="select">select to parse</param>
            <param name="tag">tag which holds the select</param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.getRootNode">
            <summary>
            Returns the root node for this data set.
            </summary>
            <returns>
            The root node.
            </returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.RootNode">
            <summary>
            Returns the root node for this data set. Outside of forEach loops this is the node all tag requests will be
            evaluated against.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.getTagAttributes">
            <summary>
            Returns the allowed attributes for all tags.
            </summary>
            <returns>
            The tag attributes.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.setDatasets(System.Object[])">
            <summary>
            Set the datasets for this datasource. Not supported for MongoDB
            </summary>
            <param name="datasets"></param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.setMap(java.util.Map)">
            <summary>
            Sets the map that is used for ${variable} substitution. The map key values cannot
            have any of the characters ${} in them. When ${key} is found in any tag, it is replaced with the matching value.
            The value can be a string, number (int, float, etc), or datetime. The map is copied
            so on return changes to the passed in map will not affect the data source.
            </summary>
            <param name="map">The map of string/value pairs. </param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.setParamMode(System.Int32)">
            <summary>
            Set the parameter substitution mode.
            </summary>
            <param name="mode">the parameter substitution mode.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.validateTag(net.windward.tags.BaseTag)">
            <summary>
            Throw an exception if the passed in tage is not valid.
            </summary>
            <param name="tag">The tag to validate.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.approveDenyModifySelect(net.windward.tags.BaseTag)">
                    * Verifys that a tag select is approved by a user defined callback
                    * Or denies by throwing a DatasourceException or modifies the select
                     *
                     * @param xmlTag The tag to check
                    * @throws net.windward.env.DataSourceException
                    *          thrown if illegal parameters passed in.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.CheckIsUnique(WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.VAR_TYPE,System.String,System.String,net.windward.datasource.DataSourceNode[])">
            <summary>
            Checks that the variable is not already in use
            </summary>
            <param name="type">One of: SET, QUERY, or FOREACH</param>
            <param name="name">the variable name</param>
            <param name="select">The select from the tag</param>
            <param name="stack">Stack of forEach loops</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.Properties">
            <summary>
            All of the properties for this datasource connection. Includes the password unencrypted.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.GetNativeVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.String)">
            <summary>
            Gets the variable from a data provider on the stack. The stack is queried in order from top to bottom and if
            the provider in turn owns the variable its value is returnd.
            The base implementation simply returns null. Override it in the derived provider.
            </summary>
            <param name="stack">The current stack of data providers.</param>
            <param name="var">A variable to look up. It's in the form of ${...}.</param>
            <returns>The variable's value or null if the variable does not exist.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.GetMetaData(net.windward.tags.BaseTag,System.Int32,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Calls the select for a tag and returns the nodes returned by the select.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="index">For a chart tag this is which graph in the chart to run the select on.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The metadata for the select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getMetaData(System.String,System.String,net.windward.datasource.DataSourceNode[])">
            <summary>
            Used to get metadata for a select statement
            </summary>
            <param name="select"></param>
            <param name="varName"></param>
            <param name="stack"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getObjectType(System.Object)">
            <summary>
            Finds the type of the passed in object.
            </summary>
            <param name="toExamine">Object to examine</param>
            <returns>The type of the object</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.GetForEach(net.windward.tags.ForEachTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a forEach select. This always returns a .NET DataTable or XmlList.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.GetQuery(net.windward.tags.BaseTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a query select. This always returns a .NET DataTable or XmlList
            </summary>
            <param name="tag">The tag to run. Must be a QueryTag or SwitchTag.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.GetSet(net.windward.tags.SetTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a set. This always returns a .NET DataTable or XmlList.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.AdjustSelect(System.String,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Will return the select that will be passed down to the database with all the ${vars}, etc substituted in.
            </summary>
            <param name="select">The select to adjust.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The adjusted select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.parse(System.String,net.windward.datasource.DataSourceNode[],System.Int32)">
            <summary>
            Parses a select to substitute in all variables.
            </summary>
            <param name="attr">The select string to parse</param>
            <param name="stack">The stack of forEach nodes</param>
            <param name="mode">The query mode</param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getOut(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],java.util.Locale,net.windward.util.macro.IMacroState)">
            <summary>
            Called for an out tag. Returns the text to be inserted into the report. Return a 0 length string
            for an empty node. Return null if the requested node does not exist and there is no default value.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="locale">The locale to produce the output in.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.addQuery(net.windward.tags.QueryTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for a query tag. Adds this query to the list of queries the document holds. This query will continue
            to exist after this node is gone.
            </summary>
            <param name="tag">The values that identify the datasource node to read. </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.addSet(net.windward.tags.SetTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called for a set tag. Adds this set to the list of name:value pairs in the document map. This set will continue
            to exist after this node is gone. This is also called in psuedo mode (always a value=) for OutTags that have a var.
            </summary>
            <param name="tag">The tag with a name value pair.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="macroState">The macro state.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.addSwitch(net.windward.tags.SwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for a switch tag. Adds this switch to the list of switch the document holds. This switch will continue 
            until the endSwitch is called.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <returns>true if no select. For a select, true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.endSwitch(net.windward.tags.EndSwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called when a switch ends. Will pop the innermost switch off the internal stack.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.evaluate(System.String,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Evaluate an expression for the boolean result.
            </summary>
            <param name="text">The expression to evaluate.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="macroState">The Macro state, passed in to all macro calls.</param>
            <returns> true or false.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getBitmap(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called when tag is of type BITMAP. Returns the fileimage of the bitmap from the datasource. Return a 0 length
            array for an empty bitmap. Return null if the requested node does not exist.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The macro state.</param>
            <returns> A file image of the referenced bitmap.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getCursor">
            <summary>
            Returns the underlying cursor this node presently holds.
            </summary>
            <returns>The underlying cursor this node presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getData(net.windward.tags.ChartTag,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary> 
            Returns a set of data used to create a chart. The structure of this is tied tightly to the chart package.
            </summary>
            <param name="tag">  The wr:chart tag with the select setting to use.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="locale">The locale to produce the output in.</param>
            <returns>The data used by the charting functions to create the chart.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getDatasourceState(net.windward.datasource.DataSourceNode[])">
            <summary>
            Used by the debugger to get the datasource state.
            </summary>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>The debugger state.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getEquationData(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a data query for the equation system 
            </summary>
            <param name="query">The data query</param>
            <param name="stack"> Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getValue(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Tag returning a single value.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getImport(net.windward.tags.ImportTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for an import tag. Returns the name of the resource to be parsed and inserted into the report. Windward
            Reports will process the returned string based on the tag type attribute. Return a 0 length string for an empty
            node. Return null if the requested node does not exist. Windward Reports uses the type and source attributes on
            this returned value. This method cannot affect those attributes.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns> The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getIterator">
            <summary>
            Returns the iterator presently in use for this node.
            </summary>
            <returns> The iterator in use for this node. Will return null if no iterator is in use for this node. </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getLink(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for a link tag. Returns the link text that is the url for the link. Return a 0 length string
            for an empty node. Return null if the requested node does not exist.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns> The url for a link.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getOutStream(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called for an out tag. Returns the raw bytes of a node. This is used to read a rtf or xml file from the database.
            Return a 0 length stream for an empty node. Return null if the requested node does not exist and there is no
            default value.
            </summary>
            <param name="tag">  The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns> The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Determine the query mode of a given string
            </summary>
            <param name="query">Query string to determine the mode of.</param>
            <param name="tag">The tag this select is for. This may be null.</param>
            <returns>BaseTag.MODE_NONE, BaseTag.MODE_VALUE, BaseTag.MODE_EVALUATE, or BaseTag.MODE_SELECT</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.getVariableValue(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a variable
            </summary>
            <param name="variable">The name of the variable</param>
            <param name="stack">Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.isCase(net.windward.tags.CaseTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called for a case tag. Returns if the case is true. This normally is identical to isExistingNode() but can be 
            different as this determines if an &lt;wr:case ... &gt; tag will return true while isExistingNode is used 
            in numerous other cases.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <param name="macroState">The Macro state, passed in to all macro calls.</param>
            <returns>True if the case is true, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.isExistingNode(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Return true if the passed in node exists. This should return true even if the passed in node is empty. This
            method needs to be fast.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns> True if the node exists, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.isIf(net.windward.tags.IfTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called for an if tag. Returns if the node exists. This normally is identical to isExistingNode() but can be
            different as this determines if an &lt;wr:if ... &gt; tag will return true while isExistingNode is used
            in numerous other cases.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="macroState">The Macro state, passed in to all macro calls.</param>
            <returns> True if the node exists, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.isSelect(System.String,System.Boolean)">
            <summary>
            Returns true if the passed in string is a select, false if it's a value= or evaluate= string.
            </summary>
            <param name="select">The select.</param>
            <param name="textIsNode">not used.</param>
            <returns>true if a select, false if an evalute.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.iterator(net.windward.tags.ForEachTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for a forEach tag. Returns an iterator used to walk through the nodes that match the forEach tag. It
            is the responsibility of this iterator to handle begin, step, and end in the tag. If there are no nodes, an
            iterator that will return false on the first call to hasNext() should be returned.<br/>
            Windward Reports will never request multiple simultaneous iterators from a DataSourceNode. When this method
            is called, any iterators from previous calls to this method are no longer in use. This restriction is critical
            for the functionality of the method getIterator().
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>An iterator to walk the nodes that match.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.close">
            <summary> We are done with this iterator. Used to close any resources opened by this object.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.getCount">
            <summary> 
            Return the count the iteration is on. This is a 1-based number of the number of nodes returned so far. It only
            counts nodes returned. This is undefined before the first call to next and is 1 after the first call to next.
            </summary>
            <returns> The number of nodes returned so far.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.getIndex">
            <summary> 
            Return the index the iteration is on. This is a 0-based number of the index into the node list and counts all
            nodes including those skipped if step > 1. This is undefined before the first call to next and is 0 after the
            first call to next.
            </summary>
            <returns> The index presently on.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.getNode(System.Int32)">
            <summary> 
            Returns the requested node from the set of nodes presently on. Index must be less than the step size. Unlike
            next() calling this method does not advance the dataset.
            </summary>
            <param name="offset">The offset from the base node on. A value of 0 is identical to the value returned by next.</param>
            <returns> The node at this offset.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.getResultSet">
            <summary>
            Returns the result set this iterator presently holds. This is implementation specific.
            </summary>
            <returns>the result set this iterator presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.getTag">
            <summary> 
            Return the forEach tag in use for this iterator. This is the tag that is the start of a block in the report that
            this iterator is iterating through.
            </summary>
            <returns> the forEach tag in use for this iterator.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.hasNext">
            <summary>
            Returns true if the iteration has more nodes. (In other words, returns true if next would return a
            node rather than throwing an exception.)
            </summary>
            <returns>true if the iterator has more elements.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.isFirst">
            <summary> 
            Return true if on the first node returned. This is undefined before the first call to next and is true after the
            first call to next.
            </summary>
            <returns> true if on the first node, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.isLast">
            <summary> 
            Return true if on the last node returned. This is undefined before the first call to next and is true after the
            call to next which returns the last node that will be returned.
            </summary>
            <returns> true if on the last node, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.next">
            <summary>
            Returns the next node in the iteration. This will always return an object of type MongoDBNode.
            This advances the current entry to the next (N next if step > 1).
            </summary>
            <returns>the next element in the iteration.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.MongoDBNode.MongoDBIterator.remove">
            <summary> This will throw an UnsupportedOperationException.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoDBDataSource.convertToDataClass(System.Object,System.String)">
            <summary>
            Converts the entity to the object types expected by the engine.
            </summary>
            <param name="entity">Entity to convert</param>
            <returns>New object</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.getResult(MongoDB.Driver.MongoDatabase,System.String)">
            <summary>
            Given a query, and a database, this returns the results of running that query.
            </summary>
            <param name="db"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.getCollectionName(System.String)">
            <summary>
            Given a full query string, this returns the collection name.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.getFunctionName(System.String)">
            <summary>
            Given a full query string, this returns the function name.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.getFunctionParameters(System.String)">
            <summary>
            Given a full query string, this returns the parameters of the function.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.getOrderBy(System.String)" -->
        <member name="T:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.orderbyPair">
            <summary>
            Used to represent an order-by.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.sendOffQuery(MongoDB.Driver.MongoDatabase)">
            <summary>
            Send the query off to the database.
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.buildQueryDocs(System.String,MongoDB.Driver.MongoDatabase)">
            <summary>
            Builds the query documents and the projection array. MUST be called before MongoParser.sendOffQuery()
            </summary>
            <param name="query">The query string.</param>
            <param name="db">Database to evaluate it against.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.buildFindQuery(System.String,MongoDB.Driver.MongoDatabase)">
            <summary>
            Used for a db.collection.find() type query.
            </summary>
            <param name="findParams"></param>
            <param name="db"></param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.buildMapReduce(System.String)">
            <summary>
            Builds the variables needed for a map-reduce.
            </summary>
            <param name="mapReduceFunctions"></param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.getIncludedFieldsDocument(System.String)">
            <summary>
            Get the projection, but only the ones to include. If a projection specifies that we should disclude a field, 
            it is simply ignored, and the driver will implicitly disclude it.
            </summary>
            <param name="findParams"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.mongodb.MongoParser.getIncludedFields(System.String)">
            <summary>
            Gets the included fields as an array of strings
            </summary>
            <param name="findParams"></param>
            <returns></returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage">
            <summary>
            A request to the OData server. This is borrowed from the OData samples.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.#ctor(System.String,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE)">
            <summary>
            Create the request.
            </summary>
            <param name="uri">The uri requested.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The protocol used for the connection.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.#ctor(System.String,WindwardInterfaces.net.windward.AdvancedConnection.IAdvancedConnection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create the request.
            </summary>
            <param name="uri">The uri requested.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The protocol used for the connection.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.GetHeader(System.String)">
            <summary>
            Get a request header.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.SetHeader(System.String,System.String)">
            <summary>
            Set a request header.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.GetResponse">
            <summary>
            Get the response from the request.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.GetStream">
            <summary>
            Get the request stream.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.Headers">
            <summary>
            Get all headers. Not supported.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.Url">
            <summary>
            Get the request uri. Set is not supported.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientRequestMessage.Method">
            <summary>
            The request method.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage">
            <summary>
            A response from the OData server. This is borrowed from the OData samples.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Create the response object.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage.GetHeader(System.String)">
            <summary>
            Get the response headers.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage.Headers">
            <summary>
            Get all response headers.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage.SetHeader(System.String,System.String)">
            <summary>
            Set the response headers.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage.StatusCode">
            <summary>
            Get the response status code. Set is not supported.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage.StatusDescription">
            <summary>
            Get the response description. Set is not supported.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.HTTPClientResponseMessage.GetStream">
            <summary>
            Get the response stream.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource">
            <summary>
            Datasource connection to an OData datasource.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.#ctor(System.String,WindwardInterfaces.net.windward.AdvancedConnection.IAdvancedConnection,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Create an OData datasource which uses an IAdvancedConnection to get data from the service.
            </summary>
            <param name="advConn">Connection to use for ALL requests to the service.</param>
            <param name="properties">The properties to pass into the advConn when we issue a request.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.#ctor(System.String,System.Int32)">
            <summary>
            Create a DataSourceProvider that uses OData. This will connect to the OData datasource multiple times..
            </summary>
            <param name="url">The base url to the OData server.</param>
            <param name="version">The version for this datasource. This will work if it's less than the actual version.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.#ctor(System.String,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,System.Int32)">
            <summary>
            Create a DataSourceProvider that uses OData. This will connect to the OData datasource multiple times..
            </summary>
            <param name="url">The base url to the OData server.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The connection protocol.</param>
            <param name="version">The version for this datasource. This will work if it's less than the actual version.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.getDatasourceName">
            <summary>
            Returns the name of this type in the form "sql", "xml", etc.
            </summary>
            <returns>"odata"</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.getParamMode">
            <summary>
            Get the parameter substitution mode.
            </summary>
            <returns>
            the parameter substitution mode.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.setParamMode(System.Int32)">
            <summary>
            Set the parameter substitution mode.
            </summary>
            <param name="mode">the parameter substitution mode.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.setMap(java.util.Map)">
            <summary>
            Sets the map that is used for ${variable} substitution. The map key values cannot
            have any of the characters ${} in them. When ${key} is found in any tag, it is replaced with the matching value.
            The value can be a string, number (int, float, etc), or datetime. The map is copied
            so on return changes to the passed in map will not affect the data source.
            </summary>
            <param name="map">The map of string/value pairs. </param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.getMap">
            <summary>
            Returns the map of variables for this datasource.
            </summary>
            <returns>
            the map of variables for this datasource.
            </returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.Properties">
            <summary>
            All of the properties for this datasource connection. Includes the password unencrypted.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.getTagAttributes">
            <summary>
            Returns the allowed attributes for all tags.
            </summary>
            <returns>
            The tag attributes.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Determine the query mode of a given string
            </summary>
            <param name="query">Query string to determine the mode of.</param>
            <param name="tag">The tag this select is for. This may be null.</param>
            <returns>BaseTag.MODE_NONE, BaseTag.MODE_VALUE, BaseTag.MODE_EVALUATE, or BaseTag.MODE_SELECT</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataVersion">
            <summary>
            The OData version for this datasource.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.Model">
            <summary>
            The EDM model for this datasource.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.setDatasets(System.Object[])">
            <summary>
            Set the datasets for this datasource. Not supported for OData
            </summary>
            <param name="datasets"></param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.RootNode">
            <summary>
            Returns the root node for this data set. Outside of forEach loops this is the node all tag requests will be
            evaluated against.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.getRootNode">
            <summary>
            Returns the root node for this data set.
            </summary>
            <returns>
            The root node.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.close">
            <summary>
            Called when processing is complete.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.#ctor(WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource,WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.GetNativeVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.String)">
            <summary>
            Gets the variable from a data provider on the stack. The stack is queried in order from top to bottom and if
            the provider in turn owns the variable its value is returnd.
            The base implementation simply returns null. Override it in the derived provider.
            </summary>
            <param name="stack">The current stack of data providers.</param>
            <param name="var">A variable to look up. It's in the form of ${...}.</param>
            <returns>The variable's value or null if the variable does not exist.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.GetMetaData(net.windward.tags.BaseTag,System.Int32,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Calls the select for a tag and returns the nodes returned by the select.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="index">For a chart tag this is which graph in the chart to run the select on.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The metadata for the select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.GetForEach(net.windward.tags.ForEachTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a forEach select. This always returns a .NET DataTable or XmlList.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.GetQuery(net.windward.tags.BaseTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a query select. This always returns a .NET DataTable or XmlList
            </summary>
            <param name="tag">The tag to run. Must be a QueryTag or SwitchTag.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.GetSet(net.windward.tags.SetTag,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Returns the data from a set. This always returns a .NET DataTable or XmlList.
            </summary>
            <param name="tag">The tag to run.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.AdjustSelect(System.String,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            Will return the select that will be passed down to the database with all the ${vars}, etc substituted in.
            </summary>
            <param name="select">The select to adjust.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The adjusted select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.isSelect(System.String,System.Boolean)">
            <summary>
            Returns true if the passed in string is a select, false if it's a value= or evaluate= string.
            </summary>
            <param name="select">The select.</param>
            <param name="textIsNode">not used.</param>
            <returns>true if a select, false if an evalute.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.addQuery(net.windward.tags.QueryTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for a query tag. Adds this query to the list of queries the document holds. This query will continue
            to exist after this node is gone.
            </summary>
            <param name="tag">The values that identify the datasource node to read. </param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.addSet(net.windward.tags.SetTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called for a set tag. Adds this set to the list of name:value pairs in the document map. This set will continue
            to exist after this node is gone. This is also called in psuedo mode (always a value=) for OutTags that have a var.
            </summary>
            <param name="tag">The tag with a name value pair.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="macroState">The macro state.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getBitmap(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called when tag is of type BITMAP. Returns the fileimage of the bitmap from the datasource. Return a 0 length
            array for an empty bitmap. Return null if the requested node does not exist.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The macro state.</param>
            <returns> A file image of the referenced bitmap.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getImport(net.windward.tags.ImportTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for an import tag. Returns the name of the resource to be parsed and inserted into the report. Windward
            Reports will process the returned string based on the tag type attribute. Return a 0 length string for an empty
            node. Return null if the requested node does not exist. Windward Reports uses the type and source attributes on
            this returned value. This method cannot affect those attributes.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns> The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getLink(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for a link tag. Returns the link text that is the url for the link. Return a 0 length string
            for an empty node. Return null if the requested node does not exist.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns> The url for a link.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getOut(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],java.util.Locale,net.windward.util.macro.IMacroState)">
            <summary>
            Called for an out tag. Returns the text to be inserted into the report. Return a 0 length string
            for an empty node. Return null if the requested node does not exist and there is no default value.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="locale">The locale to produce the output in.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getOutStream(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called for an out tag. Returns the raw bytes of a node. This is used to read a rtf or xml file from the database.
            Return a 0 length stream for an empty node. Return null if the requested node does not exist and there is no
            default value.
            </summary>
            <param name="tag">  The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns> The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.isIf(net.windward.tags.IfTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Called for an if tag. Returns if the node exists. This normally is identical to isExistingNode() but can be
            different as this determines if an &lt;wr:if ... &gt; tag will return true while isExistingNode is used
            in numerous other cases.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="macroState">The Macro state, passed in to all macro calls.</param>
            <returns> True if the node exists, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.addSwitch(net.windward.tags.SwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for a switch tag. Adds this switch to the list of switch the document holds. This switch will continue 
            until the endSwitch is called.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <returns>true if no select. For a select, true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.isCase(net.windward.tags.CaseTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called for a case tag. Returns if the case is true. This normally is identical to isExistingNode() but can be 
            different as this determines if an &lt;wr:case ... &gt; tag will return true while isExistingNode is used 
            in numerous other cases.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <param name="macroState">The Macro state, passed in to all macro calls.</param>
            <returns>True if the case is true, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.endSwitch(net.windward.tags.EndSwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called when a switch ends. Will pop the innermost switch off the internal stack.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.isExistingNode(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Return true if the passed in node exists. This should return true even if the passed in node is empty. This
            method needs to be fast.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns> True if the node exists, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.evaluate(System.String,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary> 
            Evaluate an expression for the boolean result.
            </summary>
            <param name="text">The expression to evaluate.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="macroState">The Macro state, passed in to all macro calls.</param>
            <returns> true or false.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getData(net.windward.tags.ChartTag,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary> 
            Returns a set of data used to create a chart. The structure of this is tied tightly to the chart package.
            </summary>
            <param name="tag">  The wr:chart tag with the select setting to use.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="locale">The locale to produce the output in.</param>
            <returns>The data used by the charting functions to create the chart.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getVariableValue(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a variable
            </summary>
            <param name="variable">The name of the variable</param>
            <param name="stack">Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getEquationData(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a data query for the equation system 
            </summary>
            <param name="quer">The data query</param>
            <param name="stack"> Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.iterator(net.windward.tags.ForEachTag,net.windward.datasource.DataSourceNode[])">
            <summary> 
            Called for a forEach tag. Returns an iterator used to walk through the nodes that match the forEach tag. It
            is the responsibility of this iterator to handle begin, step, and end in the tag. If there are no nodes, an
            iterator that will return false on the first call to hasNext() should be returned.<br/>
            Windward Reports will never request multiple simultaneous iterators from a DataSourceNode. When this method
            is called, any iterators from previous calls to this method are no longer in use. This restriction is critical
            for the functionality of the method getIterator().
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>An iterator to walk the nodes that match.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getIterator">
            <summary>
            Returns the iterator presently in use for this node.
            </summary>
            <returns> The iterator in use for this node. Will return null if no iterator is in use for this node. </returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator">
            <summary>
            The DataSourceIterator implementation for this datasource provider.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.#ctor(WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode,net.windward.tags.ForEachTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Create the iterator object.
            </summary>
            <param name="parent">The parent node iterating on.</param>
            <param name="tag">The tag requestiong the iteration.</param>
            <param name="stack">The node stack at the tag location.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.hasNext">
            <summary>
            Returns true if the iteration has more nodes. (In other words, returns true if next would return a
            node rather than throwing an exception.)
            </summary>
            <returns>true if the iterator has more elements.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.next">
            <summary>
            Returns the next node in the iteration. This will always return an object of type ODataNode.
            This advances the current entry to the next (N next if step > 1).
            </summary>
            <returns>the next element in the iteration.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.remove">
            <summary> This will throw an UnsupportedOperationException.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.getNode(System.Int32)">
            <summary> 
            Returns the requested node from the set of nodes presently on. Index must be less than the step size. Unlike
            next() calling this method does not advance the dataset.
            </summary>
            <param name="offset">The offset from the base node on. A value of 0 is identical to the value returned by next.</param>
            <returns> The node at this offset.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.getTag">
            <summary> 
            Return the forEach tag in use for this iterator. This is the tag that is the start of a block in the report that
            this iterator is iterating through.
            </summary>
            <returns> the forEach tag in use for this iterator.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.getIndex">
            <summary> 
            Return the index the iteration is on. This is a 0-based number of the index into the node list and counts all
            nodes including those skipped if step > 1. This is undefined before the first call to next and is 0 after the
            first call to next.
            </summary>
            <returns> The index presently on.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.getCount">
            <summary> 
            Return the count the iteration is on. This is a 1-based number of the number of nodes returned so far. It only
            counts nodes returned. This is undefined before the first call to next and is 1 after the first call to next.
            </summary>
            <returns> The number of nodes returned so far.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.isFirst">
            <summary> 
            Return true if on the first node returned. This is undefined before the first call to next and is true after the
            first call to next.
            </summary>
            <returns> true if on the first node, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.isLast">
            <summary> 
            Return true if on the last node returned. This is undefined before the first call to next and is true after the
            call to next which returns the last node that will be returned.
            </summary>
            <returns> true if on the last node, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.close">
            <summary> We are done with this iterator. Used to close any resources opened by this object.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.ODataIterator.getResultSet">
            <summary>
            Returns the result set this iterator presently holds. This is implementation specific.
            </summary>
            <returns>the result set this iterator presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getValue(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Tag returning a single value.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getValueAsString(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Tag returning a single value as a string.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getBooleanValue(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Tag returning a single value as a boolean. This includes the if tag notEmpty check.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getCursor">
            <summary>
            Returns the underlying cursor this node presently holds. This will be a IList&lt;ODataUtilities.ResultProperty>.
            </summary>
            <returns>The underlying cursor this node presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Determine the query mode of a given string
            </summary>
            <param name="query">Query string to determine the mode of.</param>
            <param name="tag">The tag this select is for. This may be null.</param>
            <returns>BaseTag.MODE_NONE, BaseTag.MODE_VALUE, BaseTag.MODE_EVALUATE, or BaseTag.MODE_SELECT</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.getDatasourceState(net.windward.datasource.DataSourceNode[])">
            <summary>
            Used by the debugger to get the datasource state.
            </summary>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>The debugger state.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.close">
            <summary>
            We are done with this node.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.parse(System.String,net.windward.datasource.DataSourceNode[],System.Int32,WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.ODataNode.RETURN_TYPE,System.Collections.Generic.List{System.Object}@)">
            <summary>
            Parses the string select and where it finds var and varStatus items from a DataSourceNode makes the appropiate
            substitution. The substitution is:<br/>
            For varStatus.count and varStatus.index it will substitute in the number. For varStatus.first and
            varStatus.last it will substitute in the word true() or false(). In both cases there is no spacing or quotes added,
            just the number or word.<br/>
            For var it will substitute in the text from the appropiate DbDataReader. Again, it will add no spacing or quotes.<br/>
            This starts with the innermost node and works out to the document root. So if two nodes have the same value
            for var and/or varStatus, it will use the inner one.
            </summary>
            <param name="attr">The string to be parsed for var and varStatus items.</param>
            <param name="stack">The stack of forEach nodes we are in at this point. stack[0] is the document root (which has no iterator).</param>
            <param name="mode">The select mode.</param>
            <param name="returnType">What we are looking for. If a forEach it's a url, otherwise it's a value.</param>
            <param name="parameters">The parameters list. This will create and populate this list.</param>
            <returns>The substituted string.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.validateTag(net.windward.tags.BaseTag)">
            <summary>
            Throw an exception if the passed in tage is not valid.
            </summary>
            <param name="tag">The tag to validate.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataDataSource.approveDenyModifySelect(net.windward.tags.BaseTag)">
                    * Verifys that a tag select is approved by a user defined callback
                    * Or denies by throwing a DatasourceException or modifies the select
                     *
                     * @param xmlTag The tag to check
                    * @throws net.windward.env.DataSourceException
                    *          thrown if illegal parameters passed in.
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities">
            <summary>
            Classes to access the OData server.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.PARAM_MARKER">
            <summary>
            Place this in the select for each parameter.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult">
            <summary>
            When reading a list of results, returns this class. This class holds a block of results that are read through. When
            moving through the list, previous entries are dropped. Reading does not cause a move and you can read ahead.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.#ctor(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion,WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="model">The model for this datasource.</param>
            <param name="version">The OData version for this datasource.</param>
            <param name="rootEntries">The list of entries returned from the query.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The protocol used for the connection.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.CreateFlatResults(WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList)">
            <summary>
            This method puts propperties and feeds all into one flat set
            </summary>
            <param name="entries"></param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.FlatResults">
            <summary>
            The flattened results. By definition Feeds will be null.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.Item(System.Int32)">
            <summary>
            Get the requested entry from the returned results. This will read more blocks if needed.
            </summary>
            <param name="index">The numEntries to read.</param>
            <returns>The requested entry.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.HasEntry">
            <summary>
            true if have an entry at [0]. This will read more blocks if needed.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.ReadNext">
            <summary>
            Get the next entry from the returned results AND remove it from the entries. This will read more blocks if needed.
            </summary>
            <returns>The requested entry.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.Seek(System.Int32)">
            <summary>
            Move forward num entries, discarding the ones moved past. This will read more blocks if needed.
            </summary>
            <param name="numEntries">The number of entries to move forward.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.HasEntryAt(System.Int32)">
            <summary>
            Returns true if there is an entry at the requested index (ie, there are at least index + 1 entries remaining).
            This will read more blocks if needed.
            </summary>
            <param name="index">The index to check to.</param>
            <returns>true if there are entries to that index.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.GetUri(System.Int32)">
            <summary>
            The Uri for this entry.
            </summary>
            <param name="index">The index of the Entry.</param>
            <returns>The entries read uri.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.GetRootUri(System.Int32)">
            <summary>
            The root Uri for this entry.
            </summary>
            <param name="index">The index of the Entry.</param>
            <returns>The entries root read uri.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.ReadIfNeeded(System.Int32)">
            <summary>
            Read the next block(s) if needed to get to the passed in index.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.HaveNextUri">
            <summary>
            true if there is a next uri
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.ReadNextBlock">
            <summary>
            Read the next block.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.Close">
            <summary>
            Done with this object. Will discard all remaining entries.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadListResult.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.Convert(Microsoft.Data.OData.ODataComplexValue)">
            <summary>
            Perform a ToString() on a complex value.
            </summary>
            <param name="complexValue">ComplexValue to convert.</param>
            <returns>The string representation of a complex value.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.Convert(Microsoft.Data.Edm.IEdmTypeReference,System.Object)">
            <summary>
            Converts to the type passed in, if possible. If not possible, returns the passed in value.
            </summary>
            <param name="type">The type to convert to.</param>
            <param name="var">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.BuildUri(System.String,System.String,System.Collections.Generic.List{System.Object},Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Create a uri with parameters.
            </summary>
            <param name="rootUri">The root uri to the OData service.</param>
            <param name="selectUri">The select component of the uri.</param>
            <param name="parameters">The parameters for any ${vars} in the uri.</param>
            <param name="model">The model for this datasource.</param>
            <param name="version">The OData version for this datasource.</param>
            <returns>The uri with parameters substituted in.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.FormatUriServiceOps(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            This will try its darndest to format service operation parameters correctly. Just returns the uri if it can't.
            </summary>
            <param name="uri"></param>
            <returns>A string which is formatted correctly based on the metadata for the service operation in the uri</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.CreateMessageReader(System.String,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion)">
            <summary>
            This is used to read a value from the service.
            </summary>
            <param name="uri"></param>
            <param name="credentials"></param>
            <param name="protocol"></param>
            <param name="model"></param>
            <param name="version"></param>
            <returns>The ODataMessageReader is what will be used 99% of the time. The IODataResponseMessage is only used when getting a binary value from the service</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.CreateMessageReader(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            
            </summary>
            <param name="responseMessage"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadList(System.String,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Read a list of results. The results may be paged and that will be handled by the returned object.
            </summary>
            <param name="uri">The full uri to read the results.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The protocol used for the connection.</param>
            <param name="model">The model for this datasource.</param>
            <param name="oDataVersion">The OData version for this datasource.</param>
            <returns>The requested list. This list has the nextUri info.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadEntryList(System.String,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Read a list of results. The results may be paged and the EntryList will have the NextUris.
            </summary>
            <param name="uri">The full uri to read the results.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The protocol used for the connection.</param>
            <param name="model">The model for this datasource.</param>
            <param name="oDataVersion">The OData version for this datasource.</param>
            <returns>The requested entry list.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadValue(System.String,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion,System.Boolean)">
            <summary>
            Read a a single entry.
            </summary>
            <param name="uri">The full uri to read the results.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The protocol used for the connection.</param>
            <param name="model">The model for this datasource.</param>
            <param name="oDataVersion">The OData version for this datasource.</param>
            <param name="forceToBinaryOutput">If the service does not specify a return type (Edm.Whatever) then this decides if we default to Edm.Binary</param>
            <returns>The requested entry.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ReadValue(System.String,Kailua.net.windward.utils.WrCredentials,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Read a a single entry.
            </summary>
            <param name="uri">The full uri to read the results.</param>
            <param name="credentials">The credentials to connect with.</param>
            <param name="protocol">The protocol used for the connection.</param>
            <param name="model">The model for this datasource.</param>
            <param name="oDataVersion">The OData version for this datasource.</param>
            <returns>The requested entry.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.KindsHas(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataPayloadKindDetectionResult},Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            Return if the results have a specific kind.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.CacheProperties(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty})">
            <summary>
            Cache the properties in an entry.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList">
            <summary>
            The collection of entries returned by a select. If these results are paged, this contains the uri for the
            next page for this specific entry list's next page of results.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList.Name">
            <summary>
            The name for this collection. This is the final filename in the uri for this collection (ie "thielen" for
            "http//windward.svc/david/nicholas/thielen").
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList.Entries">
            <summary>
            The entries in this list.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList.NextUri">
            <summary>
            The uri to get the next page of results (entries).
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList.Close">
            <summary>
            All done, release all memory.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList.AssignEntriesAndNext(WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList)">
            <summary>
            Copy assignment. Performs a shallow copy.
            </summary>
            <param name="src">Copy from this list.</param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry">
            <summary>
            A single entry. This is composed of the property values containing the entry properties. And if this
            is built with a $expand, the list of Feeds is the list of entries joined to this entry.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.Properties">
            <summary>
            The properties for this entry.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.UriEntry">
            <summary>
            The uri to read this entry.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.RootUriEntry">
            <summary>
            The uri of the root node for this entry. When results are flattened, this will have the uri for the base or
            root of the entries that were pulled in. If no flattening occurs, this will match UriEntry.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.Feeds">
            <summary>
            When a $expand is used, the entry will have 1 or more feeds which contain entries. Will create the
            list on a get if it was null.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.HaveFeeds">
            <summary>
            true if have feeds.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uriEntry">The uri to read this entry.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="rootUriEntry">The uri of the root node for this entry.</param>
            <param name="uriEntry">The uri to read this entry.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultEntry.AddFeed(WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.EntryList)">
            <summary>
            Add to the feed. Will create the feed list if null (so this must be called to add the first one).
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultComplexValue">
            <summary>
            A complex value (list of properties) in an entry.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultComplexValue.#ctor(System.String,System.Collections.Generic.IList{WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultProperty})">
            <summary>
            Creates the object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="properties">The list of properties.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultComplexValue.Properties">
            
             The list of properties for this property.
             ///
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultComplexValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultCollectionValue">
            <summary>
            A collection of values in an entry.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultCollectionValue.#ctor(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Creates the object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultCollectionValue.Values">
            <summary>
            The list of values for this property.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultProperty">
            <summary>
            A single property in an entry.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultProperty.#ctor(System.String,System.Object)">
            <summary>
            Creates the object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultProperty.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultProperty.FlatValue">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.odata.ODataUtilities.ResultProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.InvalidXPathException">
            <summary>
            Exception for invalid XPath.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.InvalidXPathException.#ctor(System.String,System.Exception)">
            <summary>
            Create the exception.
            </summary>
            <param name="xpath">The illegal xpath.</param>
            <param name="cause">The underlying exception thrown.</param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataset">
            <summary>
            A dataset, that is part of a datasource, to be passed to XPathDataSource.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataset.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{WindwardInterfaces.net.windward.datasource.DatasetField},System.Collections.Generic.List{WindwardInterfaces.net.windward.datasource.DatasetParameter})">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="selectAll">The select to get this dataset.</param>
            <param name="selectAllFormat">The format for displaying the returned vars.</param>
            <param name="selectCount">A select that will return a count of the number of possible values.</param>
            <param name="selectCheck">A select that will return if a given value is one of the list of possibles.</param>
            <param name="fields">The field mapping for this dataset.</param>
            <param name="parameters">The parameters for this dataset.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataset.#ctor(System.String,System.String,System.String)">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="select">The select to get this dataset.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataset.#ctor(WindwardInterfaces.net.windward.datasource.DatasetBase)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">The object to copy.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataset.#ctor(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataset.ToXml(System.Xml.XmlWriter)">
            <summary>
            Serialize this object.
            </summary>
            <param name="xmlWriter">The xml document serializing to.</param>
            <returns>The set of elements representing this object.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDatasetField">
            <summary>
            A field in an XPath dataset.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDatasetField.#ctor(System.String,WindwardInterfaces.net.windward.datasource.MetaDataElement,System.String,WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE,System.Boolean)">
            <summary>
            Create a field object for a column in the containing dataset.
            </summary>
            <param name="fieldName">The name used to access this field.</param>
            <param name="metadata">The metadata for this field.</param>
            <param name="description">The description of this field. Can be null.</param>
            <param name="type">The type of this field.</param>
            <param name="primaryKey">true if this field is the dataset primary key.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDatasetField.#ctor(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource" -->
        <member name="F:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.defaultPrefix">
            we hold the 100 most recent DefaultXPath objects here with the key = select for the XPath 
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.getDatasourceName">
             returns the name of this type in the form "sql", "xml", etc.
            
             @return "xml"
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.#ctor(java.io.InputStream,java.io.InputStream)">
             Create a DataSourceProvider that uses an xml stream as the data and Saxon to traverse it.
            
             @param xmlData	A well formed xml data file.
             @param schemaFile the schema file.
             @throws net.windward.env.DataConnectionException
                      thrown if anything goes wrong.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.#ctor(java.io.InputStream)">
                     /**
                     * Create a DataSourceProvider that uses an xml stream as the data and dom4j to traverse it.
                     *
                     * @param xmlData A well formed xml data file.
                     * @throws DataConnectionException thrown if anything goes wrong.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.#ctor(System.String)">
             Create a DataSourceProvider that uses an xml string as the data and dom4j to traverse it.
            
             @param xmlData Well formed xml (not a filename to an XML file - this is XML in a string).
             @throws DataConnectionException thrown if anything goes wrong.
        </member>
        <!-- Badly formed XML comment ignored for member "M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.declareNameSpaces(net.sf.saxon.s9api.XdmNode,net.sf.saxon.s9api.XPathCompiler)" -->
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.getNamespaceURI(System.String)">
             Get Namespace URI bound to a prefix in the current scope.
            
             @param prefix prefix to look up
             @return Namespace URI bound to prefix in the current scope
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonDataSource.getPrefix(System.String)">
             Get prefix bound to Namespace URI in the current scope.
            
             @param namespaceURI URI of Namespace to lookup
             @return prefix bound to Namespace URI in current context
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonNamespace">
            <summary>
            A namespace defined for the XPath selects.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonNamespace.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="prefix">The prefix as declared in use. Empty string or null for default namespace.</param>
            <param name="url">The url of the namespace.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonNamespace.Prefix">
            <summary>
            The prefix as declared in use. Empty string for default namespace.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonNamespace.Url">
            <summary>
            The url of the namespace.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonResultRow.GetFieldNames">
            Get the names of every field in this row (i.e. column names)
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonResultRow.GetField(System.String)">
            Get a field from this row. Note that this could return a DataSourceResultSet in the case of
            nested objects.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonResultRow.getUniquePath">
             This ensures the query returned has the correct index so the correct path is evaluated.
            
             @return index of node in form of string
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonResultSet">
             Created by kylied on 7/20/2015.
            
             Holds a list of XPathRows.
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.saxon.SaxonResultSet.Query">
            <summary>
            The query used to create the result set
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext">
            <summary>
            Handle custom macros and variable substitution in XPathDataSource.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.Prefix">
            <summary>
            The prefix for windward functions.
            </summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.Namespace">
            <summary>
            The uri for windward functions.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.#ctor(System.Xml.NameTable)">
            <summary>
            Create the object.
            </summary>
            <param name="table">The name table to work with. Needs to come from XmlDocument.NameTable.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.ArgList">
            <summary>
            All arguments to substitute.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.Whitespace">
            <summary>
            When overridden in a derived class, gets a value indicating whether to include white space nodes in the output. 
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.ResolveVariable(System.String,System.String)">
            <summary>
            When overridden in a derived class, resolves a variable reference and returns an IXsltContextVariable representing the variable.
            </summary>
            <param name="prefix">The prefix of the variable as it appears in the XPath expression.</param>
            <param name="name">The name of the variable. </param>
            <returns>An IXsltContextVariable representing the variable at runtime.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.CompareDocument(System.String,System.String)">
            <summary>
            When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based 
            upon the order the documents were loaded by the XSLT processor (that is, the XslTransform class).
            </summary>
            <param name="baseUri">The base URI of the first document to compare.</param>
            <param name="nextbaseUri">The base URI of the second document to compare.</param>
            <returns>An integer value describing the relative order of the two base URIs: -1 if baseUri occurs before nextbaseUri; 
            0 if the two base URIs are identical; and 1 if baseUri occurs after nextbaseUri.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.
            </summary>
            <param name="node">The white space node that is to be preserved or stripped in the current context.</param>
            <returns>Returns true if the white space is to be preserved or false if the white space is to be stripped.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            When overridden in a derived class, resolves a function reference and returns an IXsltContextFunction representing 
            the function. The IXsltContextFunction is used at execution time to get the return value of the function.
            </summary>
            <param name="prefix">The prefix of the function as it appears in the XPath expression.</param>
            <param name="name">The name of the function.</param>
            <param name="ArgTypes">An array of argument types for the function being resolved. This allows you to select between 
            methods with the same name (for example, overloaded methods). </param>
            <returns>An IXsltContextFunction representing the function.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.XPathExtensionVariable.Evaluate(System.Xml.Xsl.XsltContext)">
            <summary>
            Evaluates the variable at runtime and returns an object that represents the value of the variable.
            </summary>
            <returns>An object representing the value of the variable. Possible return types include number, 
            string, Boolean, document fragment, or node set.</returns>
            <param name="xsltContext">An XsltContext representing the execution context of the variable.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.XPathExtensionVariable.IsLocal">
            <summary>
            Gets a value indicating whether the variable is local.
            </summary>
            <returns>
            true if the variable is a local variable in the current context; otherwise, false.
            </returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.XPathExtensionVariable.IsParam">
            <summary>
            Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformations (XSLT) 
            parameter. This can be a parameter to a style sheet or a template.
            </summary>
            <returns>
            true if the variable is an XSLT parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.XPathExtensionVariable.VariableType">
            <summary>
            Gets the XPathResultType representing the XML Path Language (XPath) type of the variable.
            </summary>
            <returns>
            The XPathResultType representing the XPath type of the variable.
            </returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.IWindwardContextFunction.FunctionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.EndsWithFunction">
            <summary>
            Handles the ends-with(strTest, strEndText) function
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.EndsWithFunction.ArgTypes">
            <summary>
            Gets the supplied XML Path Language (XPath) types for the function's argument list. This information can be used 
            to discover the signature of the function which allows you to differentiate between overloaded functions.
            </summary>
            <returns>An array of XPathResultType representing the types for the function's argument list.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.EndsWithFunction.FunctionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.EndsWithFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            Provides the method to invoke the function with the given arguments in the given context.
            </summary>
            <returns>An object representing the return value of the function.</returns>
            <param name="xsltContext">The XSLT context for the function call.</param>
            <param name="args">The arguments of the function call. Each argument is an element in the array.</param>
            <param name="docContext">The context node for the function call.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.EndsWithFunction.Maxargs">
            <summary>
            Gets the maximum number of arguments for the function. This enables the user to differentiate between overloaded functions.
            </summary>
            <returns>The maximum number of arguments for the function.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.EndsWithFunction.Minargs">
            <summary>
            Gets the minimum number of arguments for the function. This enables the user to differentiate between overloaded functions.
            </summary>
            <returns>The minimum number of arguments for the function.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.EndsWithFunction.ReturnType">
            <summary>
            Gets the XPathResultType representing the XPath type returned by the function.
            </summary>
            <returns>An XPathResultType representing the XPath type returned by the function.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.MatchFunction">
            <summary>
            Handles the match (strTest, strRegex) function.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.MatchFunction.ArgTypes">
            <summary>
            Gets the supplied XML Path Language (XPath) types for the function's argument list. This information can be used 
            to discover the signature of the function which allows you to differentiate between overloaded functions.
            </summary>
            <returns>An array of XPathResultType representing the types for the function's argument list.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.MatchFunction.FunctionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.MatchFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            Provides the method to invoke the function with the given arguments in the given context.
            </summary>
            <returns>An object representing the return value of the function.</returns>
            <param name="xsltContext">The XSLT context for the function call.</param>
            <param name="args">The arguments of the function call. Each argument is an element in the array.</param>
            <param name="docContext">The context node for the function call.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.MatchFunction.Maxargs">
            <summary>
            Gets the maximum number of arguments for the function. This enables the user to differentiate between overloaded functions.
            </summary>
            <returns>The maximum number of arguments for the function.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.MatchFunction.Minargs">
            <summary>
            Gets the minimum number of arguments for the function. This enables the user to differentiate between overloaded functions.
            </summary>
            <returns>The minimum number of arguments for the function.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathCustomContext.MatchFunction.ReturnType">
            <summary>
            Gets the XPathResultType representing the XPath type returned by the function.
            </summary>
            <returns>An XPathResultType representing the XPath type returned by the function.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataset">
            <summary>
            A dataset, that is part of a datasource, to be passed to XPathDataSource.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataset.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{WindwardInterfaces.net.windward.datasource.DatasetField},System.Collections.Generic.List{WindwardInterfaces.net.windward.datasource.DatasetParameter})">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="selectAll">The select to get this dataset.</param>
            <param name="selectAllFormat">The format for displaying the returned vars.</param>
            <param name="selectCount">A select that will return a count of the number of possible values.</param>
            <param name="selectCheck">A select that will return if a given value is one of the list of possibles.</param>
            <param name="fields">The field mapping for this dataset.</param>
            <param name="parameters">The parameters for this dataset.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataset.#ctor(System.String,System.String,System.String)">
            <summary>
            Create the object.
            </summary>
            <param name="name">The name of this dataset.</param>
            <param name="description">The description for this dataset.</param>
            <param name="select">The select to get this dataset.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataset.#ctor(WindwardInterfaces.net.windward.datasource.DatasetBase)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">The object to copy.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataset.#ctor(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataset.ToXml(System.Xml.XmlWriter)">
            <summary>
            Serialize this object.
            </summary>
            <param name="xmlWriter">The xml document serializing to.</param>
            <returns>The set of elements representing this object.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathDatasetField">
            <summary>
            A field in an XPath dataset.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDatasetField.#ctor(System.String,WindwardInterfaces.net.windward.datasource.MetaDataElement,System.String,WindwardInterfaces.net.windward.datasource.DatasetField.FIELD_TYPE,System.Boolean)">
            <summary>
            Create a field object for a column in the containing dataset.
            </summary>
            <param name="fieldName">The name used to access this field.</param>
            <param name="metadata">The metadata for this field.</param>
            <param name="description">The description of this field. Can be null.</param>
            <param name="type">The type of this field.</param>
            <param name="primaryKey">true if this field is the dataset primary key.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDatasetField.#ctor(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource">
            <summary>
            This supplies a data source to Windward Reports using XPathDatasource.
            
            To reference a data element from a &lt;wr:forEach ... var="item" &gt; or &lt;wr:query ... var="item" &gt; tag inside
            another tag, use the following construct: '${item}/xpath' where xpath is an xpath reference from the node defined by
            item and the reference will return a single element.
            
            When inside a forEach where step='N' where N &gt; 1, you can also use ${item[1]}/xpath ... ${item[N-1]}/xpath to
            reference data for the N rows in each step. ${item[0]}/xpath is legal but redundent. You can also use &lt;wr:if
            test='$item[1]}'&gt; which will return true if the row[1] exists. Keep in mind that [1], [2], ... is not an absolute
            count but an offset from the base row presently on in the loop. And you cannot index past the set of rows that are
            the row presently on and the rows that will be skipped by step.
            
            useful info on namespaces at http://www.hanselman.com/blog/GetNamespacesFromAnXMLDocumentWithXPathDocumentAndLINQToXML.aspx
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.getDatasourceName">
            <summary>
            Returns the name of this type in the form "sql", "xml", etc.
            </summary>
            <returns>"xml"</returns>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.userMap">
            <summary>The set map.</summary>
        </member>
        <member name="F:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.cachedUserMap">
            <summary>If this is not null, it is a copy of userMap.</summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Create a DataSourceProvider that uses an XPathNavigator as the data.
            </summary>
            <param name="xmlData">The xml for the data.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.Xml.XPath.XPathDocument)">
            <summary>
            Create a DataSourceProvider that uses an XPathDocument as the data source.
            </summary>
            <param name="xmlData">xmlData A well formed xml data file.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses an XmlNode DOM as it's datasource. This can be XmlDocument.DocumentElement.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Create a datasource provider from the passed in stream.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="schemaStream">A well formed schema document for the data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Create a datasource provider from the passed in reader.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses an xml stream as the data.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.String,WindwardReportsDrivers.net.windward.datasource.DotNetDatasourceBase.CONNECT_MODE,System.String,System.String)">
            <summary>
            Open the xml datasource from a url using the mode specified by the credentials mode. Use for http, https, ftp, etc. only.
            </summary>
            <param name="url">The url to open.</param>
            <param name="mode">The credential mode to use.</param>
            <param name="username">The username for security. Pass null or empty for none.</param>
            <param name="password">The password for security. Pass null or empty for none.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.String,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,System.String,System.String,System.String,Kailua.net.windward.utils.FileUtils.CONNECT_MODE,System.String,System.String)">
            <summary>
            Open the xml datasource from a url using the mode specified by the credentials mode. Use for http, https, ftp, etc. only.
            </summary>
            <param name="url">The url to open. Must already be escaped</param>
            <param name="mode">The credential mode to use.</param>
            <param name="username">The username for security. Pass null or empty for none.</param>
            <param name="password">The password for security. Pass null or empty for none.</param>
            <param name="urlSchema">The schema url to open.</param>
            <param name="modeSchema">The schema credential mode to use.</param>
            <param name="usernameSchema">The schema username for security. Pass null or empty for none.</param>
            <param name="passwordSchema">The schema password for security. Pass null or empty for none.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.String,System.Net.ICredentials)">
            <summary>
            Create a DataSourceProvider that uses a url and credentials for the data. Uses XmlUrlResolver and XmlReader to read the file.
            </summary>
            <param name="url">The url to the well formed xml data file.</param>
            <param name="credentials">The credentials for accessing the file. null if no credentials.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(System.String,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses the passed in string as the xml. This is NOT a filename, this is
            the actual xml to be queried.
            </summary>
            <param name="xmlData">A well formed xml string (not a filename).</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.#ctor(java.io.InputStream,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses a java InputStream as the data.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.SetNamespaces(WindwardReportsDrivers.net.windward.datasource.xml.XPathNamespace[])">
            <summary>
            Explicitly set the namespaces for this datasource. This will remove all the default namespaces (if any) and/or
            namespaces previously explicitly set.
            </summary>
            <param name="namespaces">The namespaces for this XML datasource.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.setDatasets(System.Object[])">
            <summary>
            Set the datasets to use with this datasource. This will overwrite datasets from previous calls to this method.
            </summary>
            <param name="datasets">The datasets to use. Can be null to turn off datasets. This is a XPathDataset[] but because of
            how the .NET engine is structured, we need to declare it as an object.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.getParamMode">
            <summary>
            Get the parameter substitution mode.
            </summary>
            <returns>
            the parameter substitution mode.
            </returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.setParamMode(System.Int32)">
            <summary>
            Set the parameter substitution mode.
            </summary>
            <param name="mode">the parameter substitution mode.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.setMap(java.util.Map)">
            <summary>
            Sets the map that is used for ${variable} substitution. The map key values cannot
            have any of the characters ${} in them. When ${key} is found in any tag, it is replaced with the matching value.
            The value can be a string, number (int, float, etc), or datetime. The map is copied
            so on return changes to the passed in map will not affect the data source.
            </summary>
            <param name="map">The map of string/value pairs.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.getMap">
            <summary>
            Returns the map of variables for this datasource.
            </summary>
            <returns>the map of variables for this datasource.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.setDefaultNamespacePrefix(System.String)">
            <summary>
            The prefixes for namespaces are pulled from the XML datasource. The default namespace, if one exists, needs
            to be set. The default is def (ie /def:root/def:elem ).
            </summary>
            <param name="prefix">The prefix used for the default namespace in xpath selects.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.getDefaultNamespacePrefix">
            <summary>
            The prefixes for namespaces are pulled from the XML datasource. The default namespace, if one exists, needs
            to be set. The default is def (ie /def:root/def:elem ).
            </summary>
            <returns>The prefix used for the default namespace in xpath selects.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.getRootNode">
            <summary>
            Returns the root node for this data set. Outside of forEach loops this is the node all tag requests will be
            evaluated against.
            </summary>
            <returns>The root node.</returns>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.RootNode">
            <summary>
            Returns the root node for this data set. Outside of forEach loops this is the node all tag requests will be
            evaluated against.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.Properties">
            <summary>
            All of the properties for this datasource connection. Includes the password unencrypted.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.close">
            <summary>
            Called when processing is complete. Used to close any resources opened by this object. Does nothing.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.getTagAttributes">
            <summary>
            Returns the allowed attributes for all tags.
            </summary>
            <returns>The tag attributes.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.validateTag(net.windward.tags.BaseTag)">
            <summary>
            Verifys that a tag has all required attributes and no unknown attributes.
            </summary>
            <param name="xmlTag">The tag to check.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.approveDenyModifySelect(net.windward.tags.BaseTag)">
                    * Verifys that a tag select is approved by a user defined callback
                    * Or denies by throwing a DatasourceException or modifies the select
                     *
                     * @param xmlTag The tag to check
                    * @throws net.windward.env.DataSourceException
                    *          thrown if illegal parameters passed in.
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Determine the query mode of a given string
            </summary>
            <param name="query">Query string to determine the mode of.</param>
            <param name="tag">The tag this select is for. This may be null.</param>
            <returns>BaseTag.MODE_NONE, BaseTag.MODE_VALUE, BaseTag.MODE_EVALUATE, or BaseTag.MODE_SELECT</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.GetNativeValue(System.Xml.XPath.XPathNavigator)">
            <summary>
            Return the nav.Value in the native type (bool, int, etc).
            </summary>
            <param name="nav">The navigator to read the value of</param>
            <returns>The value in its native format.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator">
            <summary>
            The DataSourceIterator inside XPathNode.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.getTag">
            <summary>
            Return the forEach tag in use for this iterator. This is the tag that is the start of a block in the report that
            this iterator is iterating through.
            </summary>
            <returns>the forEach tag in use for this iterator.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.hasNext">
            <summary>
            Returns true if the iteration has more nodes. (In other words, returns true if next would return a
            node rather than throwing an exception.)
            </summary>
            <returns>true if the iterator has more elements.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.next">
            <summary>
            Returns the next node in the iteration. This will always return an object of type DataSourceNode.
            </summary>
            <returns>the next element in the iteration.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.getNode(System.Int32)">
            <summary>
            Returns the requested node from the set of nodes presently on. Index must be less than the step size. Unlike
            next() calling this method does not advance the dataset.
            </summary>
            <param name="offset">The offset from the base node on. A value of 0 is identical to the value returned by next.</param>
            <returns></returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.remove">
            <summary>
            This will throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.getIndex">
            <summary>
            Return the index the iteration is on. This is a 0-based number of the index into the node list and counts all
            nodes including those skipped if step > 1. This is undefined before the first call to next and is 0 after the
            first call to next.
            </summary>
            <returns>The index presently on.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.getCount">
            <summary>
            Return the count the iteration is on. This is a 1-based number of the number of nodes returned so far. It only
            counts nodes returned. This is undefined before the first call to next and is 1 after the first call to next.
            </summary>
            <returns>The number of nodes returned so far.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.isFirst">
            <summary>
            Return true if on the first node returned. This is undefined before the first call to next and is true after the
            first call to next.
            </summary>
            <returns>true if on the first node, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.isLast">
            <summary>
            Return true if on the last node returned. This is undefined before the first call to next and is true after the
            call to next which returns the last node that will be returned.
            </summary>
            <returns>true if on the last node, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.close">
            <summary>
            We are done with this iterator. Used to close any resources opened by this object. Does nothing in this class.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocIterator.getResultSet">
            <summary>
            Returns the result set this iterator presently holds. This is implementation specific.
            </summary>
            <returns>The result set this iterator presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.GetNativeVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.String)">
            <summary>
            Calls XPathDocNode.getVariable() with MODE_VALUE.
            </summary>
            <param name="stack">The current stack of data providers.</param>
            <param name="var">A variable to look up. It's in the form of ${...}.</param>
            <returns>The variable's value or null if the variable does not exist.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.AdjustSelect(System.String,System.Collections.Generic.IList{net.windward.datasource.DataSourceNode})">
            <summary>
            This method is only called by AutoTag. It is never called by the engine and can just throw an exception for
            a datasource written for the engine only. This will adjust a select statement to use the "column as alias"
            construct if there are multiple identical columns in the select.
            </summary>
            <param name="select">The select to adjust.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
                have length of at least 1.</param>
            <returns>The adjusted select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getBitmap(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called when tag is of type BITMAP. Returns the fileimage of the bitmap from the datasource. Return a 0 length
            array for an empty bitmap. Return null if the requested node does not exist.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>A file image of the referenced bitmap.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getImport(net.windward.tags.ImportTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for an import tag. Returns the name of the resource to be parsed and inserted into the report. Windward
            Reports will process the returned string based on the tag type attribute. Return a 0 length string for an empty
            node. Return null if the requested node does not exist. Windward Reports uses the type and source attributes on
            this returned value. This method cannot affect those attributes.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getLink(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for a link tag. Returns the link text that is the url for the link. Return a 0 length string
            for an empty node. Return null if the requested node does not exist.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>The url for a link.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getOut(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],java.util.Locale,net.windward.util.macro.IMacroState)">
            <summary>
            Called for an out tag. Returns the text to be inserted into the report. Return a 0 length string
            for an empty node. Return null if the requested node does not exist and there is no default value.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="locale">The locale to produce the output in.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getOutStream(net.windward.tags.OutTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called for an out tag. Returns the raw bytes of a node. This is used to read a rtf or xml file from the database.
            Return a 0 length stream for an empty node. Return null if the requested node does not exist and there is no
            default value.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>The text to insert into the report.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getData(net.windward.tags.ChartTag,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Returns a set of data used to create a chart. The structure of this is tied tightly to the chart package.
            </summary>
            <param name="tag">The wr:chart tag with the select setting to use.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="locale">The locale to produce the output in.</param>
            <returns>The data used by the charting functions to create the chart.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.isExistingNode(net.windward.tags.BaseTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Return true if the passed in node exists. This should return true even if the passed in node is empty. This
            method needs to be fast.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>True if the node exists, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.evaluate(System.String,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Evaluate an expression for the bool result.
            </summary>
            <param name="text">The expression to evaluate.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.isIf(net.windward.tags.IfTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called for an if tag. Returns if the node exists. This normally is identical to isExistingNode() but can be
            different as this determines if an &lt;wr:if ... &gt; tag will return true while isExistingNode is used
            in numerous other cases.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>True if the node exists, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.addSwitch(net.windward.tags.SwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for a switch tag. Adds this switch to the list of switch the document holds. This switch will continue 
            until the endSwitch is called.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <returns>true if no select. For a select, true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.isCase(net.windward.tags.CaseTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called for a case tag. Returns if the case is true. This normally is identical to isExistingNode() but can be 
            different as this determines if an &lt;wr:case ... &gt; tag will return true while isExistingNode is used 
            in numerous other cases.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
            <returns>True if the case is true, false otherwise.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.endSwitch(net.windward.tags.EndSwitchTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called when a switch ends. Will pop the innermost switch off the internal stack.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always 
            have length of at least 1.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.iterator(net.windward.tags.ForEachTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for a forEach tag. Returns an iterator used to walk through the nodes that match the forEach tag. It
            is the responsibility of this iterator to handle begin, step, and end in the tag. If there are no nodes, an
            iterator that will return false on the first call to hasNext() should be returned.
            Windward Reports will never request multiple simultaneous iterators from a DataSourceNode. When this method
            is called, any iterators from previous calls to this method are no longer in use. This restriction is critical
            for the functionality of the method getIterator().
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>An iterator to walk the nodes that match.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getIterator">
            <summary>
            Returns the iterator presently in use for this node. This is <b>not</b> the method called when processing
            a forEach tag. The method called to process a forEach tag is iterator(). This method is called to get the
            iterator in use for a node.
            Windward Reports will never request multiple simultaneous iterators from a DataSourceNode. This restriction
            is critical for the functionality of this method.
            This is <b>not</b> the iterator that returned this in it's iteration. It is the iterator created by this node
            and is returning nodes 1 level higher in the node stack. For example, stack[0] holds the iterator for the
            node at stack[1]. And by definition, the node at the top of the stack cannot have an iterator (because if it
            did, the first node returned by that iterator would then be on the top of the stack).
            </summary>
            <returns>The iterator in use for this node. Will return null if no iterator is in use for this node.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.addQuery(net.windward.tags.QueryTag,net.windward.datasource.DataSourceNode[])">
            <summary>
            Called for a query tag. Adds this query to the list of queries the document holds. This query will continue
            to exist after this node is gone.
            </summary>
            <param name="tag">The values that identify the datasource node to read.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <returns>true if returned 1 or more rows of data. false if no data.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.addSet(net.windward.tags.SetTag,net.windward.datasource.DataSourceNode[],net.windward.util.macro.IMacroState)">
            <summary>
            Called for a set tag. Adds this set to the list of name:value pairs in the document map. This set will continue
            to exist after this node is gone. This is also called in psuedo mode (always a value=) for OutTags that have a var.
            </summary>
            <param name="tag">The tag with a name value pair.</param>
            <param name="stack">The stack of forEach loops in at this point. Node [0] is the root document node so this will always
            have length of at least 1.</param>
            <param name="state">The Macro state, passed in to all macro calls.</param>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.close">
            <summary>
            We are done with this node. Used to close any resources opened by this object. Does nothing in this class.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getCursor">
            <summary>
            Returns the underlying XPathNavigator this node presently holds.
            </summary>
            <returns>the underlying XPathNavigator this node presently holds.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getVariable(System.Collections.Generic.IList{net.windward.datasource.DataSourceNode},System.Int32,System.String,System.String)">
            <summary>
            for a given variable name, we return its value. Depending on its format we do different things, but it will be primarily from either
            the userMap, the queriesMap, the rdlDatasets map, or from a forEach loop.
            </summary>
            <param name="stack">The stack of forEach nodes we are in at this point. stack[0] is the document root (which has no iterator).</param>
            <param name="mode">One of BaseTag.MODE_SELECT/VALUE/EVALUATE listing what we want to get back.</param>
            <param name="fullSelect">The original select (for error messages).</param>
            <param name="var">The var to get.</param>
            <returns>The value of the var.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.SelectNodes(System.Xml.XPath.XPathNavigator,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Get an XPathNodeIterator for the requested select.
            </summary>
            <param name="nav">The navigator to run the select from.</param>
            <param name="xpath">The xpath to select.</param>
            <param name="parameters">The parameters for this select. Must be a 0 length list for none.</param>
            <returns>The node iterator.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.SortComparer">
            <summary>
            This sorts by number if the two strings passed in can both be converted to a number
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.SelectNodeNavigator(System.Xml.XPath.XPathNavigator,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Get an XPathNavigator for the requested select.
            </summary>
            <param name="nav">The navigator to run the select from.</param>
            <param name="xpath">The xpath to select.</param>
            <param name="parameters">The parameters for this select. Must be a 0 length list for none.</param>
            <returns>The navigator.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.SelectSingleNode(System.Xml.XPath.XPathNavigator,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Selects a single node, returns a string.
            </summary>
            <param name="nav">Perform the select on this navigartor.</param>
            <param name="xpath">The XPath select.</param>
            <param name="parameters">The parameters for this select.</param>
            <returns>The result of the select.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.SelectSingleNodeTyped(System.Xml.XPath.XPathNavigator,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Selects a single node, if possible returns a typed object.
            </summary>
            <param name="nav">Perform the select on this navigartor.</param>
            <param name="xpath">The XPath select.</param>
            <param name="parameters">The parameters for this select.</param>
            <returns>The result of the select, if possible returns a typed object.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getVariableValue(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a variable
            </summary>
            <param name="variable">The name of the variable</param>
            <param name="stack">Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getEquationData(System.String,net.windward.datasource.DataSourceNode[],java.util.Locale)">
            <summary>
            Evaluate a data query for the equation system 
            </summary>
            <param name="quer">The data query</param>
            <param name="stack"> Data sources</param>
            <param name="locale">The set locale</param>
            <returns>The evaluated result of a variable</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.XPathDocNode.getQueryMode(System.String,net.windward.tags.BaseTag)">
            <summary>
            Determine the query mode of a given string
            </summary>
            <param name="query">Query string to determine the mode of.</param>
            <param name="tag">The tag this select is for. This may be null.</param>
            <returns>BaseTag.MODE_NONE, BaseTag.MODE_VALUE, BaseTag.MODE_EVALUATE, or BaseTag.MODE_SELECT</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.NodeLocator">
            <summary>
            For an XmlNode in an XmlDocument, can determine the XPath to return that specific node. Can also then determine the non-specific
            XPath to a subsequent child node (the XPath that will return that node AND ALSO any peer nodes of the same name(s)).
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.NodeLocator.GetUniqueLocation(System.Collections.Generic.Dictionary{System.String,System.String},System.Xml.XmlNode)">
            <summary>
            Get the unique XPath for the passed in node.
            </summary>
            <param name="namespaceMap">If namespace prefixes are different from the raw XmlDocument, this dictionaru is key=uri, value=prefix.</param>
            <param name="node">The node to get the unique XPath to.</param>
            <returns>The unique XPath to node.</returns>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathDataSource.NodeLocator.GetLocation(System.Collections.Generic.Dictionary{System.String,System.String},System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Get the unique XPath for the passed in node. It uses the unique XPath from the root to the parent and then non-unique XPath from the parent to the node.
            </summary>
            <param name="namespaceMap">If namespace prefixes are different from the raw XmlDocument, this dictionaru is key=uri, value=prefix.</param>
            <param name="parent">The node to get the unique XPath to.</param>
            <param name="node">The node to get the NON-unique XPath to.</param>
            <returns>The unique XPath to node.</returns>
        </member>
        <member name="T:WindwardReportsDrivers.net.windward.datasource.xml.XPathNamespace">
            <summary>
            A namespace defined for the XPath selects.
            </summary>
        </member>
        <member name="M:WindwardReportsDrivers.net.windward.datasource.xml.XPathNamespace.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="prefix">The prefix as declared in use. Empty string or null for default namespace.</param>
            <param name="url">The url of the namespace.</param>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathNamespace.Prefix">
            <summary>
            The prefix as declared in use. Empty string for default namespace.
            </summary>
        </member>
        <member name="P:WindwardReportsDrivers.net.windward.datasource.xml.XPathNamespace.Url">
            <summary>
            The url of the namespace.
            </summary>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SforceService">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.#ctor">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.loginCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeSObjectCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeSObjectsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeGlobalCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroupsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroupStructuresCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeKnowledgeSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeFlexiPagesCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeAppMenuCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeGlobalThemeCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeThemeCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeLayoutCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeSoftphoneLayoutCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeSearchLayoutsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeSearchScopeOrderCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeCompactLayoutsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeApprovalLayoutCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeTabsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeAllTabsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describePrimaryCompactLayoutsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.createCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.updateCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.upsertCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.mergeCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.deleteCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.undeleteCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.emptyRecycleBinCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.retrieveCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.processCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.convertLeadCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.logoutCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.invalidateSessionsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.getDeletedCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.getUpdatedCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.queryCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.queryAllCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.queryMoreCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.searchCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.getServerTimestampCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.setPasswordCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.resetPasswordCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.getUserInfoCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.sendEmailMessageCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.sendEmailCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.performQuickActionsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeQuickActionsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.describeAvailableQuickActionsCompleted">
            <remarks/>
        </member>
        <member name="E:WindwardReportsDrivers.SalesForce.SforceService.retrieveQuickActionTemplatesCompleted">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.login(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.loginAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.loginAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSObject(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSObjectAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSObjectAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSObjects(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSObjectsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSObjectsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeGlobal">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeGlobalAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeGlobalAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroups(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroupsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroupsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroupStructures(WindwardReportsDrivers.SalesForce.DataCategoryGroupSobjectTypePair[],System.Boolean)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroupStructuresAsync(WindwardReportsDrivers.SalesForce.DataCategoryGroupSobjectTypePair[],System.Boolean)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeDataCategoryGroupStructuresAsync(WindwardReportsDrivers.SalesForce.DataCategoryGroupSobjectTypePair[],System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeKnowledgeSettings">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeKnowledgeSettingsAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeKnowledgeSettingsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeFlexiPages(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeFlexiPagesAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeFlexiPagesAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAppMenu(WindwardReportsDrivers.SalesForce.AppMenuType)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAppMenuAsync(WindwardReportsDrivers.SalesForce.AppMenuType)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAppMenuAsync(WindwardReportsDrivers.SalesForce.AppMenuType,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeGlobalTheme">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeGlobalThemeAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeGlobalThemeAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeTheme(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeThemeAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeThemeAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeLayout(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeLayoutAsync(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeLayoutAsync(System.String,System.String,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSoftphoneLayout">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSoftphoneLayoutAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSoftphoneLayoutAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSearchLayouts(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSearchLayoutsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSearchLayoutsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSearchScopeOrder">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSearchScopeOrderAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeSearchScopeOrderAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeCompactLayouts(System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeCompactLayoutsAsync(System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeCompactLayoutsAsync(System.String,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeApprovalLayout(System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeApprovalLayoutAsync(System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeApprovalLayoutAsync(System.String,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeTabs">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeTabsAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeTabsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAllTabs">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAllTabsAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAllTabsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describePrimaryCompactLayouts(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describePrimaryCompactLayoutsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describePrimaryCompactLayoutsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.create(WindwardReportsDrivers.SalesForce.sObject[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.createAsync(WindwardReportsDrivers.SalesForce.sObject[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.createAsync(WindwardReportsDrivers.SalesForce.sObject[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.update(WindwardReportsDrivers.SalesForce.sObject[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.updateAsync(WindwardReportsDrivers.SalesForce.sObject[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.updateAsync(WindwardReportsDrivers.SalesForce.sObject[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.upsert(System.String,WindwardReportsDrivers.SalesForce.sObject[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.upsertAsync(System.String,WindwardReportsDrivers.SalesForce.sObject[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.upsertAsync(System.String,WindwardReportsDrivers.SalesForce.sObject[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.merge(WindwardReportsDrivers.SalesForce.MergeRequest[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.mergeAsync(WindwardReportsDrivers.SalesForce.MergeRequest[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.mergeAsync(WindwardReportsDrivers.SalesForce.MergeRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.delete(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.deleteAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.deleteAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.undelete(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.undeleteAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.undeleteAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.emptyRecycleBin(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.emptyRecycleBinAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.emptyRecycleBinAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.retrieve(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.retrieveAsync(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.retrieveAsync(System.String,System.String,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.process(WindwardReportsDrivers.SalesForce.ProcessRequest[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.processAsync(WindwardReportsDrivers.SalesForce.ProcessRequest[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.processAsync(WindwardReportsDrivers.SalesForce.ProcessRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.convertLead(WindwardReportsDrivers.SalesForce.LeadConvert[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.convertLeadAsync(WindwardReportsDrivers.SalesForce.LeadConvert[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.convertLeadAsync(WindwardReportsDrivers.SalesForce.LeadConvert[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.logout">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.logoutAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.logoutAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.invalidateSessions(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.invalidateSessionsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.invalidateSessionsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getDeleted(System.String,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getDeletedAsync(System.String,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getDeletedAsync(System.String,System.DateTime,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getUpdated(System.String,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getUpdatedAsync(System.String,System.DateTime,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getUpdatedAsync(System.String,System.DateTime,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.query(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryAll(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryAllAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryAllAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryMore(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryMoreAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.queryMoreAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.search(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.searchAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.searchAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getServerTimestamp">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getServerTimestampAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getServerTimestampAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.setPassword(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.setPasswordAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.setPasswordAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.resetPassword(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.resetPasswordAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.resetPasswordAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getUserInfo">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getUserInfoAsync">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.getUserInfoAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.sendEmailMessage(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.sendEmailMessageAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.sendEmailMessageAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.sendEmail(WindwardReportsDrivers.SalesForce.Email[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.sendEmailAsync(WindwardReportsDrivers.SalesForce.Email[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.sendEmailAsync(WindwardReportsDrivers.SalesForce.Email[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.performQuickActions(WindwardReportsDrivers.SalesForce.PerformQuickActionRequest[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.performQuickActionsAsync(WindwardReportsDrivers.SalesForce.PerformQuickActionRequest[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.performQuickActionsAsync(WindwardReportsDrivers.SalesForce.PerformQuickActionRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeQuickActions(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeQuickActionsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeQuickActionsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAvailableQuickActions(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAvailableQuickActionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.describeAvailableQuickActionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.retrieveQuickActionTemplates(System.String[],System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.retrieveQuickActionTemplatesAsync(System.String[],System.String)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.retrieveQuickActionTemplatesAsync(System.String[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WindwardReportsDrivers.SalesForce.SforceService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.LoginScopeHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginScopeHeader.organizationId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginScopeHeader.portalId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.QuickActionTemplateResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QuickActionTemplateResult.defaultValueFormulas">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QuickActionTemplateResult.defaultValues">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QuickActionTemplateResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QuickActionTemplateResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.sObject">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.sObject.type">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.sObject.fieldsToNull">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.sObject.Id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.sObject.Any">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.Error">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Error.fields">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Error.message">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Error.statusCode">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.StatusCode">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ALL_OR_NONE_OPERATION_ROLLED_BACK">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ALREADY_IN_PROCESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ASSIGNEE_TYPE_REQUIRED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.BAD_CUSTOM_ENTITY_PARENT_DOMAIN">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_CASCADE_PRODUCT_ACTIVE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_DEACTIVATE_DIVISION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_DELETE_LAST_DATED_CONVERSION_RATE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_DELETE_MANAGED_OBJECT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_DISABLE_LAST_ADMIN">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_ENABLE_IP_RESTRICT_REQUESTS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_EXECUTE_FLOW_TRIGGER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_FREEZE_SELF">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_MODIFY_MANAGED_OBJECT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_PASSWORD_LOCKOUT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_POST_TO_ARCHIVED_GROUP">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_RENAME_APEX_REFERENCED_FIELD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_RENAME_APEX_REFERENCED_OBJECT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_RENAME_REFERENCED_FIELD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_RENAME_REFERENCED_OBJECT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_REPARENT_RECORD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANNOT_UPDATE_CONVERTED_LEAD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANT_DISABLE_CORP_CURRENCY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CANT_UNSET_CORP_CURRENCY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CHILD_SHARE_FAILS_PARENT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CIRCULAR_DEPENDENCY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.COLLISION_DETECTED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.COMMUNITY_NOT_ACCESSIBLE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_APEX_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_ENTITY_OR_FIELD_LIMIT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_INDEX_EXISTS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_LINK_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_METADATA_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.CUSTOM_TAB_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DELETE_FAILED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DELETE_OPERATION_TOO_LARGE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DELETE_REQUIRED_ON_CASCADE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DEPENDENCY_EXISTS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATES_DETECTED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_CASE_SOLUTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_COMM_NICKNAME">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_CUSTOM_ENTITY_DEFINITION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_CUSTOM_TAB_MOTIF">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_DEVELOPER_NAME">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_EXTERNAL_ID">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_MASTER_LABEL">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_SENDER_DISPLAY_NAME">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_USERNAME">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.DUPLICATE_VALUE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.EMPTY_SCONTROL_FILE_NAME">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENTITY_IS_ARCHIVED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENTITY_IS_DELETED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENTITY_IS_LOCKED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.ERROR_IN_MAILER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.FAILED_ACTIVATION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.FIELD_CUSTOM_VALIDATION_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.FIELD_FILTER_VALIDATION_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.FIELD_INTEGRITY_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.FILTERED_LOOKUP_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.HTML_FILE_UPLOAD_NOT_ALLOWED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.IMAGE_TOO_LARGE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INACTIVE_OWNER_OR_USER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INSUFFICIENT_ACCESS_OR_READONLY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_ACCESS_LEVEL">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_ARGUMENT_TYPE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_ASSIGNEE_TYPE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_ASSIGNMENT_RULE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_BATCH_OPERATION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_CONTENT_TYPE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_CREDIT_CARD_INFO">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_CROSS_REFERENCE_KEY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_CURRENCY_CONV_RATE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_CURRENCY_CORP_RATE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_CURRENCY_ISO">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_DATA_CATEGORY_GROUP_REFERENCE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_DATA_URI">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_EMAIL_ADDRESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_EMPTY_KEY_OWNER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_ENTITY_FOR_MATCH_ENGINE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_ENTITY_FOR_MATCH_OPERATION_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_FIELD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_FIELD_FOR_INSERT_UPDATE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_FIELD_WHEN_USING_TEMPLATE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_FILTER_ACTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_GOOGLE_DOCS_URL">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_ID_FIELD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_INET_ADDRESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_LINEITEM_CLONE_STATE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_MASTER_OR_TRANSLATED_SOLUTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_MESSAGE_ID_REFERENCE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_OAUTH_URL">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_OPERATION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_OPERATOR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_OWNER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_PACKAGE_LICENSE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_PACKAGE_VERSION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_PARTNER_NETWORK_STATUS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_PERSON_ACCOUNT_OPERATION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_QUERY_LOCATOR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_READ_ONLY_USER_DML">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SAVE_AS_ACTIVITY_FLAG">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SESSION_ID">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SETUP_OWNER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SIGNUP_COUNTRY">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SITE_DELETE_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SITE_FILE_IMPORTED_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SITE_FILE_TYPE_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_STATUS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_SUBDOMAIN">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_TYPE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_TYPE_FOR_OPERATION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_TYPE_ON_FIELD_IN_RECORD">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.INVALID_USERID">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.IP_RANGE_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.JIGSAW_IMPORT_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.LICENSE_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.LIGHT_PORTAL_USER_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MALFORMED_ID">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MANAGER_NOT_DEFINED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MASSMAIL_RETRY_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MASS_MAIL_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_DEFINITION_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_INVALID_ENGINE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_INVALID_RULE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_MISSING_ENGINE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_MISSING_OBJECT_TYPE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_MISSING_OPTIONS_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_MISSING_RULE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_UNKNOWN_RULE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_OPERATION_UNSUPPORTED_VERSION_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_RUNTIME_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MATCH_SERVICE_UNAVAILABLE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAXIMUM_CCEMAILS_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAXIMUM_HIERARCHY_LEVELS_REACHED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAXIMUM_SIZE_OF_ATTACHMENT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAXIMUM_SIZE_OF_DOCUMENT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_ACTIONS_PER_RULE_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_ACTIVE_RULES_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_APPROVAL_STEPS_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_FORMULAS_PER_RULE_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_RULES_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_RULE_ENTRIES_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_TASK_DESCRIPTION_EXCEEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_TM_RULES_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MAX_TM_RULE_ITEMS_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MERGE_FAILED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MISSING_ARGUMENT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.MIXED_DML_OPERATION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NONUNIQUE_SHIPPING_ADDRESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NO_APPLICABLE_PROCESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NO_ATTACHMENT_PERMISSION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NO_INACTIVE_DIVISION_MEMBERS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NO_MASS_MAIL_PERMISSION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NO_SUCH_USER_EXISTS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NUMBER_OUTSIDE_VALID_RANGE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.OPTED_OUT_OF_MASS_MAIL">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.OP_WITH_INVALID_USER_TYPE_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.PACKAGE_LICENSE_REQUIRED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.PACKAGING_API_INSTALL_FAILED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.PACKAGING_API_UNINSTALL_FAILED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.PORTAL_NO_ACCESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.PRIVATE_CONTACT_ON_ASSET">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.QUERY_TIMEOUT">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.RECORD_IN_USE_BY_WORKFLOW">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.REPUTATION_MINIMUM_NUMBER_NOT_REACHED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.REQUEST_RUNNING_TOO_LONG">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.REQUIRED_FEATURE_MISSING">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.REQUIRED_FIELD_MISSING">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.SELF_REFERENCE_FROM_FLOW">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.SELF_REFERENCE_FROM_TRIGGER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.SHARE_NEEDED_FOR_CHILD_OWNER">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.SINGLE_EMAIL_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.STANDARD_PRICE_NOT_DEFINED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.STORAGE_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.STRING_TOO_LONG">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.SUBDOMAIN_IN_USE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TABSET_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TEMPLATE_NOT_ACTIVE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TEMPLATE_NOT_FOUND">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TERRITORY_REALIGN_IN_PROGRESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TOO_MANY_APEX_REQUESTS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TOO_MANY_ENUM_VALUE">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TOO_MANY_POSSIBLE_USERS_EXIST">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.TRANSFER_REQUIRES_READ">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.UNABLE_TO_LOCK_ROW">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.UNAVAILABLE_RECORDTYPE_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.UNDELETE_FAILED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.UNKNOWN_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.UNSPECIFIED_EMAIL_ADDRESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.UNSUPPORTED_APEX_TRIGGER_OPERATON">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.UNVERIFIED_SENDER_ADDRESS">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.USER_OWNS_PORTAL_ACCOUNT_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.USER_WITH_APEX_SHARES_EXCEPTION">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.VF_COMPILE_ERROR">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.WEBLINK_SIZE_LIMIT_EXCEEDED">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.WEBLINK_URL_INVALID">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.StatusCode.WRONG_CONTROLLER_TYPE">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeAvailableQuickActionResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAvailableQuickActionResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAvailableQuickActionResult.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAvailableQuickActionResult.type">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeQuickActionDefaultValue">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionDefaultValue.defaultValue">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionDefaultValue.field">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.accessLevelRequired">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.canvasApplicationName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.colors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.contextSobjectType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.defaultValues">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.height">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.iconName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.iconUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.icons">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.layout">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.miniIconUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.targetParentField">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.targetRecordTypeId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.targetSobjectType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.type">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.visualforcePageName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionResult.width">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ShareAccessLevel">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.ShareAccessLevel.Read">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.ShareAccessLevel.Edit">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.ShareAccessLevel.All">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeColor">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeColor.color">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeColor.context">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeColor.theme">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeIcon">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeIcon.contentType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeIcon.height">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeIcon.theme">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeIcon.url">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeIcon.width">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeLayoutSection">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutSection.columns">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutSection.heading">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutSection.layoutRows">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutSection.rows">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutSection.tabOrder">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutSection.useCollapsibleSection">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutSection.useHeading">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeLayoutRow">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutRow.layoutItems">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutRow.numItems">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeLayoutItem">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutItem.editableForNew">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutItem.editableForUpdate">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutItem.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutItem.layoutComponents">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutItem.placeholder">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutItem.required">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeLayoutComponent">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutComponent.displayLines">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutComponent.tabOrder">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutComponent.type">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutComponent.value">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.layoutComponentType">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.ReportChart">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.Field">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.Separator">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.SControl">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.EmptySpace">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.VisualforcePage">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.ExpandedLookup">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.AuraComponent">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.Canvas">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.layoutComponentType.CustomLink">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.CustomLinkComponent">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.CustomLinkComponent.customLink">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeLayoutButton">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.behavior">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.behaviorSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.content">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.contentSource">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.contentSourceSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.custom">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.encoding">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.height">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.heightSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.icons">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.menubar">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.overridden">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.resizeable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.scrollbars">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.showsLocation">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.showsStatus">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.toolbar">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.url">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.width">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.widthSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.windowPosition">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutButton.windowPositionSpecified">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.WebLinkWindowType">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkWindowType.newWindow">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkWindowType.sidebar">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkWindowType.noSidebar">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkWindowType.replace">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkWindowType.onClickJavaScript">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.WebLinkType">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkType.url">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkType.sControl">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkType.javascript">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkType.page">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkType.flow">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.WebLinkPosition">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkPosition.fullScreen">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkPosition.none">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.WebLinkPosition.topLeft">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ReportChartComponent">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ReportChartComponent.cacheData">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ReportChartComponent.contextFilterableField">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ReportChartComponent.error">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ReportChartComponent.hideOnError">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ReportChartComponent.includeContext">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ReportChartComponent.showTitle">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ReportChartComponent.size">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ReportChartSize">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.ReportChartSize.SMALL">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.ReportChartSize.MEDIUM">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.ReportChartSize.LARGE">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.FieldLayoutComponent">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.FieldLayoutComponent.components">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.FieldLayoutComponent.fieldType">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.fieldType">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.string">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.picklist">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.multipicklist">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.combobox">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.reference">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.base64">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.boolean">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.currency">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.textarea">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.int">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.double">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.percent">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.phone">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.id">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.date">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.datetime">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.time">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.url">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.email">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.encryptedstring">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.datacategorygroupreference">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.location">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.address">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.fieldType.anyType">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.TabOrderType">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.TabOrderType.LeftToRight">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.TabOrderType.TopToBottom">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.PerformQuickActionResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionResult.created">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionResult.feedItemIds">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionResult.ids">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.PerformQuickActionRequest">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionRequest.contextId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionRequest.quickActionName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PerformQuickActionRequest.records">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.EmailFileAttachment">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailFileAttachment.body">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailFileAttachment.contentType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailFileAttachment.fileName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailFileAttachment.inline">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailFileAttachment.inlineSpecified">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.Email">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Email.bccSender">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Email.emailPriority">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Email.replyTo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Email.saveAsActivity">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Email.senderDisplayName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Email.subject">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Email.useSignature">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.EmailPriority">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.EmailPriority.Highest">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.EmailPriority.High">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.EmailPriority.Normal">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.EmailPriority.Low">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.EmailPriority.Lowest">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SingleEmailMessage">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.bccAddresses">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.ccAddresses">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.charset">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.documentAttachments">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.htmlBody">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.inReplyTo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.fileAttachments">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.orgWideEmailAddressId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.plainTextBody">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.references">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.targetObjectId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.templateId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.toAddresses">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SingleEmailMessage.whatId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.MassEmailMessage">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MassEmailMessage.description">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MassEmailMessage.targetObjectIds">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MassEmailMessage.templateId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MassEmailMessage.whatIds">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SendEmailError">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SendEmailError.fields">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SendEmailError.message">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SendEmailError.statusCode">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SendEmailError.targetObjectId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SendEmailResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SendEmailResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SendEmailResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ResetPasswordResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ResetPasswordResult.password">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SetPasswordResult">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.GetServerTimestampResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetServerTimestampResult.timestamp">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SearchRecord">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SearchRecord.record">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SearchResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SearchResult.searchRecords">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SearchResult.sforceReserved">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.QueryResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QueryResult.done">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QueryResult.queryLocator">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QueryResult.records">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QueryResult.size">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.GetUpdatedResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUpdatedResult.ids">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUpdatedResult.latestDateCovered">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUpdatedResult.sforceReserved">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DeletedRecord">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DeletedRecord.deletedDate">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DeletedRecord.id">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.GetDeletedResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetDeletedResult.deletedRecords">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetDeletedResult.earliestDateAvailable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetDeletedResult.latestDateCovered">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetDeletedResult.sforceReserved">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.InvalidateSessionsResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.InvalidateSessionsResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.InvalidateSessionsResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.LeadConvertResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvertResult.accountId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvertResult.contactId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvertResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvertResult.leadId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvertResult.opportunityId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvertResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.LeadConvert">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.accountId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.contactId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.convertedStatus">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.doNotCreateOpportunity">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.leadId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.opportunityName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.overwriteLeadSource">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.ownerId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LeadConvert.sendNotificationEmail">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ProcessResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessResult.actorIds">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessResult.entityId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessResult.instanceId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessResult.instanceStatus">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessResult.newWorkitemIds">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ProcessRequest">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessRequest.comments">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessRequest.nextApproverIds">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ProcessWorkitemRequest">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessWorkitemRequest.action">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessWorkitemRequest.workitemId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ProcessSubmitRequest">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ProcessSubmitRequest.objectId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.EmptyRecycleBinResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmptyRecycleBinResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmptyRecycleBinResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmptyRecycleBinResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.UndeleteResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UndeleteResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UndeleteResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UndeleteResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DeleteResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DeleteResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DeleteResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DeleteResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.MergeResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MergeResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MergeResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MergeResult.mergedRecordIds">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MergeResult.success">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MergeResult.updatedRelatedIds">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.MergeRequest">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MergeRequest.masterRecord">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MergeRequest.recordToMergeIds">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.UpsertResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UpsertResult.created">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UpsertResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UpsertResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UpsertResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SaveResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SaveResult.errors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SaveResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SaveResult.success">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeTab">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.colors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.custom">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.iconUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.icons">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.miniIconUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.sobjectName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTab.url">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeTabSetResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTabSetResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTabSetResult.logoUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTabSetResult.namespace">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTabSetResult.selected">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeTabSetResult.tabs">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeApprovalLayout">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeApprovalLayout.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeApprovalLayout.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeApprovalLayout.layoutItems">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeApprovalLayout.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.RecordTypeCompactLayoutMapping">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeCompactLayoutMapping.available">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeCompactLayoutMapping.compactLayoutId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeCompactLayoutMapping.compactLayoutName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeCompactLayoutMapping.recordTypeId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeCompactLayoutMapping.recordTypeName">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeCompactLayout">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayout.actions">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayout.fieldItems">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayout.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayout.imageItems">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayout.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayout.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayout.objectType">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeCompactLayoutsResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayoutsResult.compactLayouts">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayoutsResult.defaultCompactLayoutId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeCompactLayoutsResult.recordTypeCompactLayoutMappings">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSearchScopeOrderResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSearchScopeOrderResult.keyPrefix">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSearchScopeOrderResult.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeColumn">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeColumn.field">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeColumn.format">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeColumn.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeColumn.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSearchLayoutResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSearchLayoutResult.errorMsg">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSearchLayoutResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSearchLayoutResult.limitRows">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSearchLayoutResult.objectType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSearchLayoutResult.searchColumns">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutItem">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutItem.itemApiName">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutSection">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutSection.entityApiName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutSection.items">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSoftphoneScreenPopOption">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneScreenPopOption.matchType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneScreenPopOption.screenPopData">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneScreenPopOption.screenPopType">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutInfoField">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutInfoField.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutCallType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutCallType.infoFields">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutCallType.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutCallType.screenPopOptions">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutCallType.screenPopsOpenWithin">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutCallType.sections">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutResult.callTypes">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSoftphoneLayoutResult.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.PicklistForRecordType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PicklistForRecordType.picklistName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PicklistForRecordType.picklistValues">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.PicklistEntry">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PicklistEntry.active">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PicklistEntry.defaultValue">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PicklistEntry.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PicklistEntry.validFor">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PicklistEntry.value">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.RecordTypeMapping">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeMapping.available">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeMapping.defaultRecordTypeMapping">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeMapping.layoutId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeMapping.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeMapping.picklistsForRecordType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeMapping.recordTypeId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.RelatedListSort">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedListSort.ascending">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedListSort.column">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.RelatedListColumn">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedListColumn.field">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedListColumn.format">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedListColumn.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedListColumn.lookupId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedListColumn.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.RelatedList">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.accessLevelRequiredForCreate">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.columns">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.custom">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.field">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.limitRows">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.sobject">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RelatedList.sort">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeRelatedContentItem">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeRelatedContentItem.describeLayoutItem">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeLayout">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.buttonLayoutSection">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.detailLayoutSections">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.editLayoutSections">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.highlightsPanelLayoutSection">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.quickActionList">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.relatedContent">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayout.relatedLists">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.accessLevelRequired">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.colors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.iconUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.icons">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.miniIconUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.quickActionName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.targetSobjectType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeQuickActionListItemResult.type">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeLayoutResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutResult.layouts">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutResult.recordTypeMappings">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeLayoutResult.recordTypeSelectorRequired">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeThemeItem">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeThemeItem.colors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeThemeItem.icons">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeThemeItem.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeGlobalTheme">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalTheme.global">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalTheme.theme">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeGlobalResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalResult.encoding">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalResult.maxBatchSize">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalResult.sobjects">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.activateable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.createable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.custom">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.customSetting">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.deletable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.deprecatedAndHidden">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.feedEnabled">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.keyPrefix">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.labelPlural">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.layoutable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.mergeable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.queryable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.replicateable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.retrieveable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.searchable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.triggerable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.undeletable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeGlobalSObjectResult.updateable">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem.colors">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem.content">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem.icons">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem.type">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeAppMenuItem.url">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeComponentInstanceProperty">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeComponentInstanceProperty.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeComponentInstanceProperty.value">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeComponentInstance">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeComponentInstance.properties">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeComponentInstance.typeName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeComponentInstance.typeNamespace">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeFlexiPageRegion">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeFlexiPageRegion.components">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeFlexiPageRegion.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeFlexiPageResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeFlexiPageResult.id">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeFlexiPageResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeFlexiPageResult.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeFlexiPageResult.quickActionList">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeFlexiPageResult.regions">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.KnowledgeLanguageItem">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.KnowledgeLanguageItem.active">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.KnowledgeLanguageItem.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.KnowledgeSettings">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.KnowledgeSettings.defaultLanguage">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.KnowledgeSettings.knowledgeEnabled">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.KnowledgeSettings.languages">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DataCategory">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DataCategory.childCategories">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DataCategory.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DataCategory.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupStructureResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupStructureResult.description">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupStructureResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupStructureResult.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupStructureResult.sobject">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupStructureResult.topCategories">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DataCategoryGroupSobjectTypePair">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DataCategoryGroupSobjectTypePair.dataCategoryGroupName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DataCategoryGroupSobjectTypePair.sobject">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupResult.categoryCount">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupResult.description">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupResult.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeDataCategoryGroupResult.sobject">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.RecordTypeInfo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeInfo.available">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeInfo.defaultRecordTypeMapping">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeInfo.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.RecordTypeInfo.recordTypeId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.NamedLayoutInfo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.NamedLayoutInfo.name">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.FilteredLookupInfo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.FilteredLookupInfo.controllingFields">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.FilteredLookupInfo.dependent">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.FilteredLookupInfo.optionalFilter">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.Field">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.autoNumber">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.byteLength">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.calculated">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.calculatedFormula">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.cascadeDelete">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.cascadeDeleteSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.caseSensitive">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.controllerName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.createable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.custom">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.defaultValueFormula">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.defaultedOnCreate">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.dependentPicklist">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.dependentPicklistSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.deprecatedAndHidden">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.digits">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.displayLocationInDecimal">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.displayLocationInDecimalSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.externalId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.externalIdSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.extraTypeInfo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.filterable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.filteredLookupInfo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.groupable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.htmlFormatted">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.htmlFormattedSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.idLookup">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.inlineHelpText">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.length">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.mask">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.maskType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.nameField">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.namePointing">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.namePointingSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.nillable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.permissionable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.picklistValues">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.precision">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.queryByDistance">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.referenceTo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.relationshipName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.relationshipOrder">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.relationshipOrderSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.restrictedDelete">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.restrictedDeleteSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.restrictedPicklist">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.scale">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.soapType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.sortable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.sortableSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.type">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.unique">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.updateable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.writeRequiresMasterRead">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.Field.writeRequiresMasterReadSpecified">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.soapType">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.tnsID">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsdbase64Binary">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsdboolean">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsddouble">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsdint">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsdstring">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsddate">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsddateTime">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsdtime">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.urnlocation">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.urnaddress">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.soapType.xsdanyType">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.ChildRelationship">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ChildRelationship.cascadeDelete">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ChildRelationship.childSObject">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ChildRelationship.deprecatedAndHidden">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ChildRelationship.field">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ChildRelationship.relationshipName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ChildRelationship.restrictedDelete">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.ChildRelationship.restrictedDeleteSpecified">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DescribeSObjectResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.activateable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.childRelationships">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.compactLayoutable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.createable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.custom">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.customSetting">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.deletable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.deprecatedAndHidden">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.feedEnabled">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.fields">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.keyPrefix">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.label">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.labelPlural">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.layoutable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.mergeable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.name">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.namedLayoutInfos">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.queryable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.recordTypeInfos">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.replicateable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.retrieveable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.searchLayoutable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.searchLayoutableSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.searchable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.triggerable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.triggerableSpecified">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.undeletable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.updateable">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.urlDetail">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.urlEdit">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DescribeSObjectResult.urlNew">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.LimitInfo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LimitInfo.current">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LimitInfo.limit">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LimitInfo.type">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.PackageVersion">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PackageVersion.majorNumber">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PackageVersion.minorNumber">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PackageVersion.namespace">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.GetUserInfoResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.accessibilityMode">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.currencySymbol">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.orgAttachmentFileSizeLimit">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.orgDefaultCurrencyIsoCode">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.orgDisallowHtmlAttachments">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.orgHasPersonAccounts">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.organizationId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.organizationMultiCurrency">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.organizationName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.profileId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.roleId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.sessionSecondsValid">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userDefaultCurrencyIsoCode">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userEmail">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userFullName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userLanguage">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userLocale">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userName">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userTimeZone">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userType">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.GetUserInfoResult.userUiSkin">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.LoginResult">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginResult.metadataServerUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginResult.passwordExpired">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginResult.sandbox">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginResult.serverUrl">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginResult.sessionId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginResult.userId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LoginResult.userInfo">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.OwnerChangeOptions">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.OwnerChangeOptions.transferAttachments">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.OwnerChangeOptions.transferOpenActivities">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.StreamingEnabledHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.StreamingEnabledHeader.streamingEnabled">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.CallOptions">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.CallOptions.client">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.CallOptions.defaultNamespace">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.AssignmentRuleHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.AssignmentRuleHeader.assignmentRuleId">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.AssignmentRuleHeader.useDefaultRule">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.SessionHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.SessionHeader.sessionId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.LimitInfoHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LimitInfoHeader.limitInfo">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.LocaleOptions">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.LocaleOptions.language">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.UserTerritoryDeleteHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.UserTerritoryDeleteHeader.transferToUserId">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.AllOrNoneHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.AllOrNoneHeader.allOrNone">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.EmailHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailHeader.triggerAutoResponseEmail">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailHeader.triggerOtherEmail">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.EmailHeader.triggerUserEmail">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DisableFeedTrackingHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DisableFeedTrackingHeader.disableFeedTracking">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DebuggingInfo">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DebuggingInfo.debugLog">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.AllowFieldTruncationHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.AllowFieldTruncationHeader.allowFieldTruncation">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DebuggingHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.DebuggingHeader.debugLevel">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.DebugLevel">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.DebugLevel.None">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.DebugLevel.DebugOnly">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.DebugLevel.Db">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.MruHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.MruHeader.updateMru">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.QueryOptions">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QueryOptions.batchSize">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.QueryOptions.batchSizeSpecified">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.PackageVersionHeader">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.PackageVersionHeader.packageVersions">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.AppMenuType">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.AppMenuType.AppSwitcher">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.AppMenuType.Salesforce1">
            <remarks/>
        </member>
        <member name="F:WindwardReportsDrivers.SalesForce.AppMenuType.NetworkTabs">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.loginCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.loginCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.loginCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSObjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSObjectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeSObjectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSObjectsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSObjectsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeSObjectsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeGlobalCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeGlobalCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeGlobalCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeDataCategoryGroupsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeDataCategoryGroupsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeDataCategoryGroupsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeDataCategoryGroupStructuresCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeDataCategoryGroupStructuresCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeDataCategoryGroupStructuresCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeKnowledgeSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeKnowledgeSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeKnowledgeSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeFlexiPagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeFlexiPagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeFlexiPagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeAppMenuCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeAppMenuCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeAppMenuCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeGlobalThemeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeGlobalThemeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeGlobalThemeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeThemeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeThemeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeThemeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeLayoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeLayoutCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeLayoutCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSoftphoneLayoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSoftphoneLayoutCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeSoftphoneLayoutCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSearchLayoutsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSearchLayoutsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeSearchLayoutsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSearchScopeOrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeSearchScopeOrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeSearchScopeOrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeCompactLayoutsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeCompactLayoutsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeCompactLayoutsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeApprovalLayoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeApprovalLayoutCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeApprovalLayoutCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeTabsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeTabsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeTabsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeAllTabsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeAllTabsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeAllTabsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describePrimaryCompactLayoutsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describePrimaryCompactLayoutsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describePrimaryCompactLayoutsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.createCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.createCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.createCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.updateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.updateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.updateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.upsertCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.upsertCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.upsertCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.mergeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.mergeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.mergeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.deleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.deleteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.deleteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.undeleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.undeleteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.undeleteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.emptyRecycleBinCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.emptyRecycleBinCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.emptyRecycleBinCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.retrieveCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.retrieveCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.retrieveCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.processCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.processCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.processCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.convertLeadCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.convertLeadCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.convertLeadCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.logoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.invalidateSessionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.invalidateSessionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.invalidateSessionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getDeletedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getDeletedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.getDeletedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getUpdatedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getUpdatedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.getUpdatedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.queryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.queryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.queryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.queryAllCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.queryAllCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.queryAllCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.queryMoreCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.queryMoreCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.queryMoreCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.searchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.searchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.searchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getServerTimestampCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getServerTimestampCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.getServerTimestampCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.setPasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.setPasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.setPasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.resetPasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.resetPasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.resetPasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getUserInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.getUserInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.getUserInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.sendEmailMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.sendEmailMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.sendEmailMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.sendEmailCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.sendEmailCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.sendEmailCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.performQuickActionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.performQuickActionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.performQuickActionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeQuickActionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeQuickActionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeQuickActionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeAvailableQuickActionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.describeAvailableQuickActionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.describeAvailableQuickActionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.retrieveQuickActionTemplatesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WindwardReportsDrivers.SalesForce.retrieveQuickActionTemplatesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WindwardReportsDrivers.SalesForce.retrieveQuickActionTemplatesCompletedEventArgs.Result">
            <remarks/>
        </member>
    </members>
</doc>
